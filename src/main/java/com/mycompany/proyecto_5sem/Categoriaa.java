/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.proyecto_5sem;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Marvin Siles
 */
public class Categoriaa extends javax.swing.JPanel {

    /**
     * Creates new form Categoriaa
     */
    conexionMysql conecta = new conexionMysql();
    Connection cn = conecta.estableceConexion();
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(Categoriaa.class);

    public Categoriaa() {
        initComponents();
        logger.info("Inicializando panel Categoriaa...");

        mostrarCategorias();
        logger.info("Categor√≠as cargadas correctamente.");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCate = new javax.swing.JTable();
        btnAgregar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtCategoria = new javax.swing.JTextField();
        btnActualizar = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();

        jPanel1.setBackground(new java.awt.Color(75, 99, 130));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("CATEGORIAS");

        tablaCate.setBackground(new java.awt.Color(164, 181, 196));
        tablaCate.setForeground(new java.awt.Color(255, 255, 255));
        tablaCate.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        tablaCate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaCateMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaCate);

        btnAgregar.setBackground(new java.awt.Color(166, 136, 104));
        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Descripcion:");

        txtCategoria.setBackground(new java.awt.Color(164, 181, 196));

        btnActualizar.setBackground(new java.awt.Color(166, 136, 104));
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(166, 136, 104));
        jButton3.setText("Eliminar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("ID:");

        txtID.setBackground(new java.awt.Color(164, 181, 196));
        txtID.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(jLabel3))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(51, 51, 51)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(62, 62, 62)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(19, 19, 19))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 100, Short.MAX_VALUE)
                        .addComponent(btnAgregar)
                        .addGap(46, 46, 46)
                        .addComponent(btnActualizar)
                        .addGap(45, 45, 45)
                        .addComponent(jButton3)
                        .addGap(102, 102, 102))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 750, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 430, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        try {
            // Obtener datos desde los campos de texto
            String nuevoNombreCategoria = txtCategoria.getText().trim();
            int idCategoria = Integer.parseInt(txtID.getText().trim());

            if (nuevoNombreCategoria.isEmpty()) {
                JOptionPane.showMessageDialog(null, "El nombre de la categor√≠a no puede estar vac√≠o.");
                logger.warn("Intento de actualizaci√≥n con nombre de categor√≠a vac√≠o.");
                return;
            }

            // Actualizar la categor√≠a en la base de datos
            String sql = "UPDATE Categorias SET nombre_categoria = ? WHERE id_categoria = ?";
            PreparedStatement ps = cn.prepareStatement(sql);

            ps.setString(1, nuevoNombreCategoria);
            ps.setInt(2, idCategoria);

            int resultado = ps.executeUpdate();

            if (resultado > 0) {
                JOptionPane.showMessageDialog(null, "Categor√≠a actualizada correctamente.");
                logger.info("Categor√≠a con ID {} actualizada a: {}", idCategoria, nuevoNombreCategoria);
                mostrarCategorias(); // Refresca tabla
                limpiarEntradas();   // Limpia campos
            } else {
                JOptionPane.showMessageDialog(null, "No se encontr√≥ la categor√≠a con ese ID.");
                logger.warn("No se encontr√≥ categor√≠a con ID {}", idCategoria);
            }

        } catch (SQLException e) {
            logger.error("Error al actualizar categor√≠a en la base de datos", e);
        } catch (NumberFormatException e) {
            logger.warn("ID inv√°lido (no es un n√∫mero): {}", e.getMessage());
        }

    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        // Dentro del m√©todo
        String nombreCategoria = txtCategoria.getText().trim();

        if (nombreCategoria.isEmpty()) {
            JOptionPane.showMessageDialog(null, "COMPLETA EL CAMPO NOMBRE DE CATEGOR√çA...");
            logger.warn("Intento de registrar una categor√≠a sin nombre.");
        } else {
            try {
                // Verificar si ya existe una categor√≠a con el mismo nombre (sin importar may√∫sculas/min√∫sculas)
                String sqlVerificar = "SELECT COUNT(*) FROM Categorias WHERE LOWER(nombre_categoria) = LOWER(?)";
                PreparedStatement psVerificar = cn.prepareStatement(sqlVerificar);
                psVerificar.setString(1, nombreCategoria);
                ResultSet rs = psVerificar.executeQuery();

                rs.next();
                int count = rs.getInt(1);

                if (count > 0) {
                    JOptionPane.showMessageDialog(null, "YA EXISTE UNA CATEGOR√çA CON ESE NOMBRE.");
                    logger.info("Intento de registrar una categor√≠a duplicada: {}", nombreCategoria);
                    return;
                }

                // Insertar nueva categor√≠a
                String sqlInsert = "INSERT INTO Categorias (nombre_categoria) VALUES (?)";
                PreparedStatement psInsert = cn.prepareStatement(sqlInsert);
                psInsert.setString(1, nombreCategoria);

                psInsert.executeUpdate();
                JOptionPane.showMessageDialog(null, "CATEGOR√çA REGISTRADA CORRECTAMENTE");
                logger.info("Categor√≠a registrada exitosamente: {}", nombreCategoria);

                mostrarCategorias(); // Actualiza la tabla
                limpiarEntradas();   // Limpia los campos

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "ERROR AL GUARDAR LA CATEGOR√çA: " + e.getMessage());
                logger.error("Error al guardar la categor√≠a", e);
            }
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void tablaCateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaCateMouseClicked
        btnAgregar.setEnabled(false);
        btnActualizar.setEnabled(true);

        int fila = this.tablaCate.getSelectedRow();

        if (fila != -1) {
            String id = this.tablaCate.getValueAt(fila, 0).toString();
            String nombre = this.tablaCate.getValueAt(fila, 1).toString();

            this.txtID.setText(id);
            this.txtCategoria.setText(nombre);

            logger.info("Fila seleccionada: ID={}, Nombre={}", id, nombre);
        } else {
            logger.warn("No se seleccion√≥ ninguna fila en la tabla.");
        }


    }//GEN-LAST:event_tablaCateMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
// Dentro del m√©todo de eliminaci√≥n
        if (JOptionPane.showConfirmDialog(null, "¬øEST√Å SEGURO DE ELIMINAR LA CATEGOR√çA?", "CONFIRMAR", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            try {
                int idCategoria = Integer.parseInt(txtID.getText().trim());

                String sql = "DELETE FROM Categorias WHERE id_categoria = ?";
                PreparedStatement ps = cn.prepareStatement(sql);
                ps.setInt(1, idCategoria);

                int indice = ps.executeUpdate();

                if (indice > 0) {
                    mostrarCategorias(); // Actualiza la tabla
                    limpiarEntradas();   // Limpia campos
                    JOptionPane.showMessageDialog(null, "CATEGOR√çA ELIMINADA CORRECTAMENTE");
                    logger.info("Categor√≠a con ID {} eliminada correctamente.", idCategoria);
                } else {
                    JOptionPane.showMessageDialog(null, "NO SELECCION√ì NINGUNA CATEGOR√çA PARA ELIMINAR");
                    logger.warn("Intento de eliminar categor√≠a con ID {} fallido. No existe.", idCategoria);
                }

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "ERROR AL ELIMINAR LA CATEGOR√çA: " + e.getMessage());
                logger.error("Error al eliminar la categor√≠a con ID {}: {}", txtID.getText(), e.getMessage(), e);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "ID DE CATEGOR√çA NO V√ÅLIDO");
                logger.warn("ID no v√°lido para eliminaci√≥n: {}", txtID.getText());
            }
        } else {
            logger.info("Eliminaci√≥n de categor√≠a cancelada por el usuario.");
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        btnAgregar.setEnabled(true);
        limpiarEntradas();
        logger.info("Panel clickeado, formulario listo para nuevo registro.");
    }//GEN-LAST:event_jPanel1MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaCate;
    private javax.swing.JTextField txtCategoria;
    private javax.swing.JTextField txtID;
    // End of variables declaration//GEN-END:variables
    private void mostrarCategorias() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("Nombre de Categor√≠a");

        tablaCate.setModel(modelo); // Aseg√∫rate que tablaCate sea el nombre correcto

        String consultaSQL = "SELECT id_categoria, nombre_categoria FROM Categorias ORDER BY id_categoria";
        String data[] = new String[2];

        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(consultaSQL);
            int total = 0;

            while (rs.next()) {
                data[0] = rs.getString("id_categoria");
                data[1] = rs.getString("nombre_categoria");
                modelo.addRow(data);
                total++;
            }

            logger.info("Categor√≠as cargadas exitosamente. Total: {}", total);

        } catch (SQLException e) {
            logger.error("Error al mostrar categor√≠as: {}", e.getMessage(), e);
            System.out.println("Error al mostrar categor√≠as: " + e);
        }
    }

    private void limpiarEntradas() {
        txtID.setText("");
        txtCategoria.setText("");
        logger.info("Campos de entrada limpiados.");
    }
}
