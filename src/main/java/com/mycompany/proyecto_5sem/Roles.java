/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.proyecto_5sem;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Marvin Siles
 */
public class Roles extends javax.swing.JPanel {

    /**
     * Creates new form Roles
     */
    conexionMysql conecta = new conexionMysql();
    Connection cn = conecta.estableceConexion();
    private JPanel contenedorCheckboxes; // nuevo panel para checkboxes
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(Roles.class);

    public Roles() {
        initComponents();
        logger.info("Componentes inicializados en Roles");

        try {
            mostrarRoles();
            logger.info("Roles mostrados correctamente");
        } catch (Exception e) {
            logger.error("Error al mostrar roles: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtRol = new javax.swing.JTextField();
        txtId = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        contenRol = new javax.swing.JTable();
        btnAgregar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        chkEquipos = new javax.swing.JCheckBox();
        chkPrestamos = new javax.swing.JCheckBox();
        chkReservas = new javax.swing.JCheckBox();
        chkValoraciones = new javax.swing.JCheckBox();
        chkReportes = new javax.swing.JCheckBox();
        chkMantenimiento = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(75, 99, 130));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ROLES");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Rol:");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Id:");

        txtRol.setBackground(new java.awt.Color(164, 181, 196));

        txtId.setBackground(new java.awt.Color(164, 181, 196));
        txtId.setEnabled(false);

        contenRol.setBackground(new java.awt.Color(164, 181, 196));
        contenRol.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        contenRol.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                contenRolMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(contenRol);

        btnAgregar.setBackground(new java.awt.Color(166, 136, 104));
        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnActualizar.setBackground(new java.awt.Color(166, 136, 104));
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(166, 136, 104));
        jButton3.setText("Eliminar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        chkEquipos.setForeground(new java.awt.Color(255, 255, 255));
        chkEquipos.setText("Equipos Disponibles");
        chkEquipos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkEquiposActionPerformed(evt);
            }
        });

        chkPrestamos.setForeground(new java.awt.Color(255, 255, 255));
        chkPrestamos.setText("Mis Prestamos");
        chkPrestamos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPrestamosActionPerformed(evt);
            }
        });

        chkReservas.setForeground(new java.awt.Color(255, 255, 255));
        chkReservas.setText("Reservas");
        chkReservas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkReservasActionPerformed(evt);
            }
        });

        chkValoraciones.setForeground(new java.awt.Color(255, 255, 255));
        chkValoraciones.setText("Valoraciones");
        chkValoraciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkValoracionesActionPerformed(evt);
            }
        });

        chkReportes.setForeground(new java.awt.Color(255, 255, 255));
        chkReportes.setText("Reportes");
        chkReportes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkReportesActionPerformed(evt);
            }
        });

        chkMantenimiento.setForeground(new java.awt.Color(255, 255, 255));
        chkMantenimiento.setText("Mantenimiento");
        chkMantenimiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMantenimientoActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("poderes del rol");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnActualizar))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtRol, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                                        .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkEquipos)
                                    .addComponent(chkPrestamos)
                                    .addComponent(chkReservas)
                                    .addComponent(chkValoraciones)
                                    .addComponent(chkReportes)
                                    .addComponent(chkMantenimiento))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(189, 189, 189)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(txtRol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel1))
                                        .addGap(16, 16, 16))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnAgregar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addComponent(btnActualizar))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkEquipos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkPrestamos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkReservas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkValoraciones)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkReportes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkMantenimiento)
                        .addGap(103, 103, 103))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        btnAgregar.setEnabled(true);
        limpiarEntradas();
    }//GEN-LAST:event_jPanel1MouseClicked

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        try {
            String nuevoNombreRol = txtRol.getText().trim();
            int idRol = Integer.parseInt(txtId.getText().trim());

            if (nuevoNombreRol.isEmpty()) {
                JOptionPane.showMessageDialog(null, "El nombre del rol no puede estar vacío.");
                logger.warn("Intento de actualizar rol con nombre vacío");
                return;
            }

            logger.info("Actualizando rol ID " + idRol + " con nuevo nombre: " + nuevoNombreRol);

            // Actualizar el nombre del rol
            String sqlUpdateRol = "UPDATE Roles SET nombre_rol = ? WHERE id_rol = ?";
            PreparedStatement psRol = cn.prepareStatement(sqlUpdateRol);
            psRol.setString(1, nuevoNombreRol);
            psRol.setInt(2, idRol);
            psRol.executeUpdate();
            logger.info("Nombre del rol actualizado en la base de datos");

            // Eliminar accesos anteriores
            String sqlEliminarAccesos = "DELETE FROM accesos_panel WHERE id_rol = ?";
            PreparedStatement psEliminar = cn.prepareStatement(sqlEliminarAccesos);
            psEliminar.setInt(1, idRol);
            psEliminar.executeUpdate();
            logger.info("Accesos anteriores eliminados para el rol ID " + idRol);

            // Insertar nuevos accesos seleccionados
            List<String> panelesSeleccionados = obtenerSubpanelesUsuarioSeleccionados();

            for (String panel : panelesSeleccionados) {
                String sqlInsertAcceso = "INSERT INTO accesos_panel (id_rol, nombre_panel) VALUES (?, ?)";
                PreparedStatement psInsert = cn.prepareStatement(sqlInsertAcceso);
                psInsert.setInt(1, idRol);
                psInsert.setString(2, panel);
                psInsert.executeUpdate();
                logger.info("Acceso insertado: " + panel + " para el rol ID " + idRol);
            }

            JOptionPane.showMessageDialog(null, "Rol y accesos actualizados correctamente.");
            logger.info("Rol y accesos actualizados correctamente en la interfaz");

            mostrarRoles();
            limpiarEntradas();

        } catch (SQLException e) {
            logger.error("ERROR AL ACTUALIZAR ROL: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "ERROR al actualizar el rol: " + e.getMessage());
        } catch (NumberFormatException e) {
            logger.warn("ID inválido al actualizar rol: " + txtId.getText());
            JOptionPane.showMessageDialog(null, "ID inválido (no es un número)");
        }

    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        String nombreRol = txtRol.getText().trim();

        if (nombreRol.isEmpty()) {
            JOptionPane.showMessageDialog(null, "COMPLETA EL CAMPO NOMBRE DE ROL...");
            logger.warn("Intento de registrar un rol sin nombre.");
        } else {
            try {
                // Verificar si ya existe un rol con el mismo nombre
                String sqlVerificar = "SELECT COUNT(*) FROM Roles WHERE LOWER(nombre_rol) = LOWER(?)";
                PreparedStatement psVerificar = cn.prepareStatement(sqlVerificar);
                psVerificar.setString(1, nombreRol);
                ResultSet rs = psVerificar.executeQuery();

                rs.next();
                int count = rs.getInt(1);

                if (count > 0) {
                    JOptionPane.showMessageDialog(null, "YA EXISTE UN ROL CON ESE NOMBRE.");
                    logger.warn("Rol duplicado detectado: " + nombreRol);
                    return;
                }

                // Insertar nuevo rol
                String sqlInsert = "INSERT INTO Roles (nombre_rol) VALUES (?)";
                PreparedStatement psInsert = cn.prepareStatement(sqlInsert, Statement.RETURN_GENERATED_KEYS);
                psInsert.setString(1, nombreRol);
                psInsert.executeUpdate();
                logger.info("Rol insertado correctamente: " + nombreRol);

                // Obtener ID del rol recién insertado
                ResultSet generatedKeys = psInsert.getGeneratedKeys();
                int idRol = -1;
                if (generatedKeys.next()) {
                    idRol = generatedKeys.getInt(1);
                    logger.info("ID del nuevo rol generado: " + idRol);
                }

                // Insertar accesos a subpaneles del panelUSUARIO
                List<String> panelesSeleccionados = obtenerSubpanelesUsuarioSeleccionados();

                for (String panel : panelesSeleccionados) {
                    String sqlAcceso = "INSERT INTO accesos_panel (id_rol, nombre_panel) VALUES (?, ?)";
                    PreparedStatement psAcceso = cn.prepareStatement(sqlAcceso);
                    psAcceso.setInt(1, idRol);
                    psAcceso.setString(2, panel);
                    psAcceso.executeUpdate();
                    logger.info("Acceso insertado: Rol ID " + idRol + ", Panel: " + panel);
                }

                JOptionPane.showMessageDialog(null, "ROL Y ACCESOS A PANELUSUARIO REGISTRADOS CORRECTAMENTE");
                logger.info("Registro completo del rol y accesos para: " + nombreRol);

                mostrarRoles();
                limpiarEntradas();

            } catch (SQLException e) {
                logger.error("ERROR AL GUARDAR EL ROL: " + e.getMessage());
                JOptionPane.showMessageDialog(null, "ERROR AL GUARDAR EL ROL: " + e.getMessage());
            }
        }


    }//GEN-LAST:event_btnAgregarActionPerformed

    private void contenRolMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contenRolMouseClicked
        btnAgregar.setEnabled(false);
        btnActualizar.setEnabled(true);
        logger.info("Botón 'Agregar' deshabilitado y 'Actualizar' habilitado.");

        int fila = this.contenRol.getSelectedRow();
        logger.info("Fila seleccionada en la tabla: " + fila);

        String idRol = this.contenRol.getValueAt(fila, 0).toString();
        String nombreRol = this.contenRol.getValueAt(fila, 1).toString();

        this.txtId.setText(idRol);
        this.txtRol.setText(nombreRol);

        logger.info("Datos cargados desde tabla: ID = " + idRol + ", Rol = " + nombreRol);

        marcarCheckBoxes(nombreRol);
        logger.info("CheckBoxes marcados según el rol seleccionado: " + nombreRol);
    }//GEN-LAST:event_contenRolMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (JOptionPane.showConfirmDialog(null, "¿ESTÁ SEGURO DE ELIMINAR EL ROL?", "CONFIRMAR", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            try {
                int idRol = Integer.parseInt(txtId.getText().trim());
                logger.info("Iniciando eliminación del rol con ID: " + idRol);

                // Primero eliminar accesos del rol
                String sqlAccesos = "DELETE FROM accesos_panel WHERE id_rol = ?";
                PreparedStatement psAccesos = cn.prepareStatement(sqlAccesos);
                psAccesos.setInt(1, idRol);
                int filasAccesos = psAccesos.executeUpdate();
                logger.info("Se eliminaron " + filasAccesos + " accesos asociados al rol ID: " + idRol);

                // Luego eliminar el rol
                String sql = "DELETE FROM Roles WHERE id_rol = ?";
                PreparedStatement ps = cn.prepareStatement(sql);
                ps.setInt(1, idRol);
                int filasRol = ps.executeUpdate();
                logger.info("Se eliminaron " + filasRol + " registros del rol ID: " + idRol);

                JOptionPane.showMessageDialog(null, "ROL ELIMINADO CORRECTAMENTE");
                mostrarRoles();
                limpiarEntradas();
                logger.info("Actualización de vista y limpieza completadas tras eliminación.");
            } catch (SQLException e) {
                logger.error("ERROR AL ELIMINAR EL ROL: " + e.getMessage());
                JOptionPane.showMessageDialog(null, "ERROR AL ELIMINAR EL ROL: " + e.getMessage());
            } catch (NumberFormatException e) {
                logger.warn("ID de rol inválido: " + e.getMessage());
                JOptionPane.showMessageDialog(null, "ID inválido para eliminación.");
            }
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void chkEquiposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkEquiposActionPerformed


    }//GEN-LAST:event_chkEquiposActionPerformed

    private void chkPrestamosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPrestamosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkPrestamosActionPerformed

    private void chkReservasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkReservasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkReservasActionPerformed

    private void chkValoracionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkValoracionesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkValoracionesActionPerformed

    private void chkReportesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkReportesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkReportesActionPerformed

    private void chkMantenimientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMantenimientoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkMantenimientoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JCheckBox chkEquipos;
    private javax.swing.JCheckBox chkMantenimiento;
    private javax.swing.JCheckBox chkPrestamos;
    private javax.swing.JCheckBox chkReportes;
    private javax.swing.JCheckBox chkReservas;
    private javax.swing.JCheckBox chkValoraciones;
    private javax.swing.JTable contenRol;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtRol;
    // End of variables declaration//GEN-END:variables

    private void mostrarRoles() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("Nombre de Rol");

        contenRol.setModel(modelo); // Asegúrate de que esta sea tu JTable para mostrar roles

        String consultaSQL = "SELECT id_rol, nombre_rol FROM Roles ORDER BY id_rol";

        String data[] = new String[2];

        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(consultaSQL);
            while (rs.next()) {
                data[0] = rs.getString("id_rol");
                data[1] = rs.getString("nombre_rol");
                modelo.addRow(data);
            }
            logger.info("Roles mostrados correctamente.");
        } catch (SQLException e) {
            logger.error("Error al mostrar roles: " + e.getMessage());
            System.out.println("Error al mostrar roles: " + e);
        }
    }

    private void limpiarEntradas() {
        txtId.setText("");      // Limpia el campo de texto para el ID del rol (si lo tienes)
        txtRol.setText("");     // Limpia el campo de texto para el nombre del rol
        logger.info("Campos de entrada limpiados.");
    }

    private List<String> obtenerSubpanelesUsuarioSeleccionados() {
        List<String> seleccionados = new ArrayList<>();

        if (chkEquipos.isSelected()) {
            seleccionados.add("Equipos Disponibles");
        }
        if (chkPrestamos.isSelected()) {
            seleccionados.add("Mis Préstamos");
        }
        if (chkReservas.isSelected()) {
            seleccionados.add("Reservas");
        }
        if (chkValoraciones.isSelected()) {
            seleccionados.add("Valoraciones");
        }
        if (chkReportes.isSelected()) {
            seleccionados.add("Reportes"); // Añadir Reportes
        }
        if (chkMantenimiento.isSelected()) {
            seleccionados.add("Mantenimiento"); // Añadir Mantenimiento
        }
        

        logger.info("Subpaneles seleccionados: " + seleccionados);
        return seleccionados;
    }

    private List<String> obtenerAccesosRol(String rol) {
        List<String> accesos = new ArrayList<>();
        String sql = "SELECT ap.nombre_panel FROM accesos_panel ap "
                + "JOIN Roles r ON ap.id_rol = r.id_rol "
                + "WHERE r.nombre_rol = ?";
        try (PreparedStatement ps = cn.prepareStatement(sql)) {
            ps.setString(1, rol);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                accesos.add(rs.getString("nombre_panel"));
            }
            logger.info("Accesos obtenidos para el rol '" + rol + "': " + accesos);
        } catch (SQLException e) {
            logger.error("Error al obtener accesos del rol '" + rol + "': " + e.getMessage());
            System.err.println("Error al obtener accesos del rol: " + e);
            JOptionPane.showMessageDialog(null, "Error al obtener accesos del rol.");
        }
        return accesos;
    }

    private void marcarCheckBoxes(String rol) {
        // Primero obtenemos los accesos para el rol
        List<String> accesos = obtenerAccesosRol(rol);

        // Desmarcar todos los checkboxes primero
        chkEquipos.setSelected(false);
        chkPrestamos.setSelected(false);
        chkReservas.setSelected(false);
        chkValoraciones.setSelected(false);
        
        chkReportes.setSelected(false);
        chkMantenimiento.setSelected(false);

        // Luego marcamos los checkboxes correspondientes
        if (accesos.contains("Equipos Disponibles")) {
            chkEquipos.setSelected(true);
        }
        if (accesos.contains("Mis Préstamos")) {
            chkPrestamos.setSelected(true);
        }
        if (accesos.contains("Reservas")) {
            chkReservas.setSelected(true);
        }
        if (accesos.contains("Valoraciones")) {
            chkValoraciones.setSelected(true);
        }
        if (accesos.contains("Reportes")) {
            chkReportes.setSelected(true); // Marcar Reportes
        }
        if (accesos.contains("Mantenimiento")) {
            chkMantenimiento.setSelected(true); // Marcar Mantenimiento
        }
        
        logger.info("Checkboxes marcados para el rol '" + rol + "'");
    }

}
