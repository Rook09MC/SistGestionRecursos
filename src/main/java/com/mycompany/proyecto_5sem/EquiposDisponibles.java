/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.proyecto_5sem;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.mail.Authenticator;
import javax.mail.PasswordAuthentication;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import javax.mail.*;
import java.text.ParseException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Marvin Siles
 */
public class EquiposDisponibles extends javax.swing.JPanel {

    /**
     * Creates new form EquiposDisponibles
     */
    conexionMysql conecta = new conexionMysql();
    Connection cn = conecta.estableceConexion();
    private int idUsuario;
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(EquiposDisponibles.class);

    public EquiposDisponibles(int idUsuario) {
        this.idUsuario = idUsuario;
        initComponents(); // tu método de inicialización 
        cargarFechaActual();
        cargarCategoriasEnCombo();
        mostrarEquipos();
        mostrarEquiposSeleccionados();
        mostrarNombreUsuario();
        AñadirMiLista();

        logger.error("EquiposDisponibles inicializado para el usuario con ID: {0}", idUsuario);
    }

    public void mostrarNombreUsuario() {
        String nombre = obtenerNombreUsuario(idUsuario);
        if (nombre != null && !nombre.isEmpty()) {
            NomUsuario.setText("Bienvenido!! " + nombre);
            logger.info("Nombre de usuario cargado: {0}", nombre);
        } else {
            NomUsuario.setText("Bienvenido!! Usuario");
            logger.error("No se pudo obtener el nombre del usuario con ID: {0}", idUsuario);
        }
    }

    private void AñadirMiLista() {
        btnañadir.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                logger.info("Botón 'Añadir a Mi Lista' presionado por el usuario con ID: {0}", idUsuario);
                MiLista();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        panel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaDisponibles = new javax.swing.JTable();
        Imagen = new javax.swing.JLabel();
        cboCategoria = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtdescripcion = new javax.swing.JTextArea();
        txtnombre = new javax.swing.JTextField();
        txtmodelo = new javax.swing.JTextField();
        cboMarca = new javax.swing.JTextField();
        jDateDevolucion = new com.toedter.calendar.JDateChooser();
        btnPrestar = new javax.swing.JButton();
        NomUsuario = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtFechaActual = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaSeleccionados = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnañadir = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        panel.setBackground(new java.awt.Color(75, 99, 130));
        panel.setPreferredSize(new java.awt.Dimension(834, 535));

        tablaDisponibles.setAutoCreateRowSorter(true);
        tablaDisponibles.setBackground(new java.awt.Color(164, 181, 196));
        tablaDisponibles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaDisponibles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaDisponiblesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaDisponibles);

        Imagen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Imagen", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        cboCategoria.setBackground(new java.awt.Color(164, 181, 196));
        cboCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboCategoriaActionPerformed(evt);
            }
        });

        txtdescripcion.setBackground(new java.awt.Color(164, 181, 196));
        txtdescripcion.setColumns(20);
        txtdescripcion.setForeground(new java.awt.Color(255, 255, 255));
        txtdescripcion.setLineWrap(true);
        txtdescripcion.setRows(5);
        txtdescripcion.setWrapStyleWord(true);
        txtdescripcion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Descripcion:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        jScrollPane2.setViewportView(txtdescripcion);

        txtnombre.setBackground(new java.awt.Color(164, 181, 196));
        txtnombre.setForeground(new java.awt.Color(255, 255, 255));
        txtnombre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nombre:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        txtmodelo.setBackground(new java.awt.Color(164, 181, 196));
        txtmodelo.setForeground(new java.awt.Color(255, 255, 255));
        txtmodelo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Modelo:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        cboMarca.setBackground(new java.awt.Color(164, 181, 196));
        cboMarca.setForeground(new java.awt.Color(255, 255, 255));
        cboMarca.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Marca:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        jDateDevolucion.setBackground(new java.awt.Color(153, 153, 153));

        btnPrestar.setBackground(new java.awt.Color(166, 136, 104));
        btnPrestar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnPrestar.setForeground(new java.awt.Color(255, 255, 255));
        btnPrestar.setText("Confirmar Reserva");
        btnPrestar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrestarActionPerformed(evt);
            }
        });

        NomUsuario.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        NomUsuario.setForeground(new java.awt.Color(255, 255, 255));
        NomUsuario.setText("BIenvenido...");

        txtCantidad.setBackground(new java.awt.Color(164, 181, 196));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Cantidad:");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Fecha de devolucion:");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Fecha de Prestamo:");

        tablaSeleccionados.setBackground(new java.awt.Color(164, 181, 196));
        tablaSeleccionados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaSeleccionados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaSeleccionadosMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tablaSeleccionados);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Lista de Equipos Disponibles");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Mi Lista ");

        btnañadir.setBackground(new java.awt.Color(166, 136, 104));
        btnañadir.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnañadir.setForeground(new java.awt.Color(255, 255, 255));
        btnañadir.setText("Añadir a mi Lista");
        btnañadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnañadirActionPerformed(evt);
            }
        });

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Buscar por categoria");

        jButton1.setText("visicon 3D");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69)
                        .addComponent(btnPrestar, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 682, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(txtnombre, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtmodelo, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboMarca, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelLayout.createSequentialGroup()
                                .addComponent(NomUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(254, 254, 254)
                                .addComponent(jLabel6))
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateDevolucion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtFechaActual, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(57, 57, 57)
                        .addComponent(btnañadir))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 682, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(Imagen, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(NomUsuario)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4))
                            .addGroup(panelLayout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cboCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(Imagen, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelLayout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(btnañadir))
                            .addGroup(panelLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(txtFechaActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5))
                            .addGroup(panelLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jDateDevolucion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnPrestar)
                            .addComponent(jButton1)))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(txtnombre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtmodelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboMarca, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 950, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tablaDisponiblesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaDisponiblesMouseClicked
        int fila = this.tablaDisponibles.getSelectedRow();

        if (fila >= 0) {
            String nombre = this.tablaDisponibles.getValueAt(fila, 1).toString();
            String descripcion = this.tablaDisponibles.getValueAt(fila, 2).toString();
            String modelo = this.tablaDisponibles.getValueAt(fila, 3).toString();
            String marca = this.tablaDisponibles.getValueAt(fila, 4).toString();

            this.txtnombre.setText(nombre);       // Nombre
            this.txtdescripcion.setText(descripcion);  // Descripción
            this.txtmodelo.setText(modelo);       // Modelo
            this.cboMarca.setText(marca);  // Marca

            logger.info("Fila seleccionada: {0}. Datos cargados - Nombre: {1}, Descripción: {2}, Modelo: {3}, Marca: {4}",
                    new Object[]{fila, nombre, descripcion, modelo, marca});

        } else {
            JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguna fila.");
            logger.error("Intento de cargar datos sin seleccionar fila.");
        }

        mostrarImagen();


    }//GEN-LAST:event_tablaDisponiblesMouseClicked

    private void cboCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboCategoriaActionPerformed
        cboCategoria.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String categoriaSeleccionada = cboCategoria.getSelectedItem().toString();
                logger.info("Categoría seleccionada en combo: {}", categoriaSeleccionada);

                if (categoriaSeleccionada.equals("Seleccione Categoria")) {
                    logger.info("Mostrando todos los equipos (sin filtro).");
                    mostrarEquipos(); // Mostrar todos los equipos
                } else {
                    logger.info("Mostrando equipos filtrados por categoría: {}", categoriaSeleccionada);
                    mostrarEquiposPorCategoria(categoriaSeleccionada); // Mostrar filtrado
                }
            }
        });


    }//GEN-LAST:event_cboCategoriaActionPerformed

    private void btnPrestarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrestarActionPerformed
        logger.info("Iniciando el proceso de préstamo de equipos.");
        prestarEquipos();
        logger.info("Préstamo de equipos completado.");

        logger.info("Actualizando la tabla de equipos disponibles.");
        actualizarTablaDisponibles();
        logger.info("Tabla de equipos disponibles actualizada.");


    }//GEN-LAST:event_btnPrestarActionPerformed

    private void btnañadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnañadirActionPerformed


    }//GEN-LAST:event_btnañadirActionPerformed

    private void tablaSeleccionadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaSeleccionadosMouseClicked

        // Obtener el modelo de la tabla
        DefaultTableModel modeloSeleccionados = (DefaultTableModel) tablaSeleccionados.getModel();

// Obtener la fila y la columna donde se hizo clic
        int row = tablaSeleccionados.rowAtPoint(evt.getPoint());
        int column = tablaSeleccionados.columnAtPoint(evt.getPoint());

        if (column == modeloSeleccionados.getColumnCount() - 1) {
            logger.info("Clic en la columna de eliminar en la fila {0}.", row);

            // Confirmar si realmente deseas eliminar la fila
            int confirm = JOptionPane.showConfirmDialog(null, "¿Deseas eliminar esta fila?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                logger.info("Eliminando fila {0} de la tabla seleccionados.", row);
                // Eliminar la fila seleccionada
                modeloSeleccionados.removeRow(row);

                // Actualizar la columna "Nro" para mantener la secuencia
                for (int i = 0; i < modeloSeleccionados.getRowCount(); i++) {
                    modeloSeleccionados.setValueAt(i + 1, i, 0);
                }
                logger.info("Actualizada la numeración en la columna 'Nro' después de eliminar.");
            } else {
                logger.info("Eliminación de fila {0} cancelada por el usuario.", row);
            }
        }


    }//GEN-LAST:event_tablaSeleccionadosMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
                VISION3D VISIOND = new VISION3D();
        logger.info("Abriendo ventana chatbot...");
        VISIOND.setVisible(true);
        logger.info("Ventana chatbot visible.");
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Imagen;
    private javax.swing.JLabel NomUsuario;
    private javax.swing.JButton btnPrestar;
    private javax.swing.JButton btnañadir;
    private javax.swing.JComboBox<String> cboCategoria;
    private javax.swing.JTextField cboMarca;
    private javax.swing.JButton jButton1;
    private com.toedter.calendar.JDateChooser jDateDevolucion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel panel;
    private javax.swing.JTable tablaDisponibles;
    private javax.swing.JTable tablaSeleccionados;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtFechaActual;
    private javax.swing.JTextArea txtdescripcion;
    private javax.swing.JTextField txtmodelo;
    private javax.swing.JTextField txtnombre;
    // End of variables declaration//GEN-END:variables
    private void mostrarEquipos() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID");          // ID oculto
        modelo.addColumn("Nombre");
        modelo.addColumn("Descripción");
        modelo.addColumn("Modelo");
        modelo.addColumn("Marca");

        tablaDisponibles.setModel(modelo);

        String consultaSQL = "SELECT Equipos.id_equipo, Equipos.nombre, descripcion, Equipos.modelo, Marcas.nombre_marca "
                + "FROM Equipos "
                + "INNER JOIN Marcas ON Equipos.id_marca = Marcas.id_marca "
                + "WHERE Equipos.id_equipo != 0 "
                + "ORDER BY Equipos.id_equipo";

        String[] data = new String[5];

        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(consultaSQL);
            while (rs.next()) {
                data[0] = rs.getString("id_equipo");
                data[1] = rs.getString("nombre");
                data[2] = rs.getString("descripcion");
                data[3] = rs.getString("modelo");
                data[4] = rs.getString("nombre_marca");

                modelo.addRow(data);
                logger.debug("Agregado equipo: ID=" + data[0] + ", Nombre=" + data[1]);
            }

            tablaDisponibles.getColumnModel().getColumn(0).setMinWidth(0);
            tablaDisponibles.getColumnModel().getColumn(0).setMaxWidth(0);
            tablaDisponibles.getColumnModel().getColumn(0).setWidth(0);

            logger.info("Equipos mostrados correctamente en tablaDisponibles.");

        } catch (SQLException e) {
            logger.error("Error al mostrar equipos disponibles: " + e.getMessage(), e);
        }
    }

    private void mostrarEquiposSeleccionados() {
        DefaultTableModel modeloSeleccionados = new DefaultTableModel();
        modeloSeleccionados.addColumn("Nro");
        modeloSeleccionados.addColumn("id");
        modeloSeleccionados.addColumn("Nombre");
        modeloSeleccionados.addColumn("Cantidad");
        modeloSeleccionados.addColumn("Fecha actual");
        modeloSeleccionados.addColumn("Fecha devolucion");
        modeloSeleccionados.addColumn("Acción");

        tablaSeleccionados.setModel(modeloSeleccionados);

        tablaSeleccionados.getColumnModel().getColumn(1).setMinWidth(0);
        tablaSeleccionados.getColumnModel().getColumn(1).setMaxWidth(0);
        tablaSeleccionados.getColumnModel().getColumn(1).setWidth(0);

        logger.info("Tabla de equipos seleccionados inicializada correctamente.");
    }

    private void mostrarImagen() {
        int fila = tablaDisponibles.getSelectedRow();

        if (fila >= 0) {
            String id = tablaDisponibles.getValueAt(fila, 0).toString();
            logger.info("Mostrar imagen para id_equipo: " + id);

            String sql = "SELECT imagen FROM Equipos WHERE id_equipo = ?";

            try (Connection cn = conecta.estableceConexion(); // CAMBIO AQUÍ
                     PreparedStatement ps = cn.prepareStatement(sql)) {

                ps.setInt(1, Integer.parseInt(id));
                ResultSet rs = ps.executeQuery();

                if (rs.next()) {
                    byte[] bytesImagen = rs.getBytes("imagen");

                    if (bytesImagen != null && bytesImagen.length > 0) {
                        ImageIcon icon = new ImageIcon(bytesImagen);
                        Icon imagenEscalada = new ImageIcon(
                                icon.getImage().getScaledInstance(Imagen.getWidth(), Imagen.getHeight(), Image.SCALE_SMOOTH)
                        );
                        Imagen.setIcon(imagenEscalada);
                        logger.info("Imagen cargada y escalada correctamente para id_equipo: " + id);
                    } else {
                        Imagen.setIcon(null);
                        logger.warn("No existe imagen para id_equipo: " + id);
                        JOptionPane.showMessageDialog(null, "Este equipo no tiene imagen.");
                    }
                }

            } catch (Exception e) {
                logger.error("Error al cargar imagen para id_equipo: " + id, e);
                JOptionPane.showMessageDialog(null, "Error al cargar imagen: " + e.getMessage());
            }
        } else {
            logger.warn("No se ha seleccionado ninguna fila para mostrar imagen.");
        }
    }

    private void cargarCategoriasEnCombo() {
        logger.info("Cargando categorías en combo...");
        cboCategoria.removeAllItems(); // Limpiar el combo

        try {
            Connection cn = conecta.estableceConexion();
            String sql = "SELECT nombre_categoria FROM Categorias";
            PreparedStatement ps = cn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            cboCategoria.addItem("Seleccione Categoria");
            logger.info("Añadido item por defecto 'Seleccione Categoria'");

            while (rs.next()) {
                String categoria = rs.getString("nombre_categoria");
                cboCategoria.addItem(categoria);
                logger.info("Añadida categoría al combo: {0}", categoria);
            }

            cn.close();
            logger.info("Categorías cargadas correctamente.");

        } catch (SQLException e) {
            logger.error("Error al cargar categorías: {0}", e.getMessage());
            JOptionPane.showMessageDialog(null, "Error al cargar categorías: " + e.getMessage());
        }

        // Evento: cuando se seleccione una categoría
        cboCategoria.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String categoriaSeleccionada = cboCategoria.getSelectedItem().toString();
                logger.info("Categoría seleccionada en combo: {0}", categoriaSeleccionada);

                if (categoriaSeleccionada.equals("Seleccione Categoria")) {
                    mostrarEquipos(); // Muestra todos los equipos
                    logger.info("Mostrando todos los equipos.");
                } else {
                    mostrarEquiposPorCategoria(categoriaSeleccionada); // Muestra solo los de esa categoría
                    logger.info("Mostrando equipos filtrados por categoría: {0}", categoriaSeleccionada);
                }
            }
        });
    }

    private void mostrarEquiposPorCategoria(String categoriaSeleccionada) {
        logger.info("Mostrar equipos filtrados por categoría: {0}", categoriaSeleccionada);

        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("Nombre");
        modelo.addColumn("Descripción");
        modelo.addColumn("Modelo");
        modelo.addColumn("Marca");

        tablaDisponibles.setModel(modelo);

        String sql = "SELECT id_equipo, Equipos.nombre, descripcion, Equipos.modelo, Marcas.nombre_marca "
                + "FROM Equipos "
                + "INNER JOIN Marcas ON Equipos.id_marca = Marcas.id_marca "
                + "INNER JOIN Categorias ON Equipos.id_categoria = Categorias.id_categoria "
                + "WHERE Categorias.nombre_categoria = ?";

        try {
            PreparedStatement ps = cn.prepareStatement(sql);
            ps.setString(1, categoriaSeleccionada);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String[] data = new String[5];
                data[0] = rs.getString("id_equipo");
                data[1] = rs.getString("nombre");
                data[2] = rs.getString("descripcion");
                data[3] = rs.getString("modelo");
                data[4] = rs.getString("nombre_marca");
                modelo.addRow(data);
                logger.info("Equipo añadido: ID={0}, Nombre={1}", new Object[]{data[0], data[1]});
            }

            // Ocultar columna ID
            tablaDisponibles.getColumnModel().getColumn(0).setMinWidth(0);
            tablaDisponibles.getColumnModel().getColumn(0).setMaxWidth(0);
            tablaDisponibles.getColumnModel().getColumn(0).setWidth(0);

            logger.info("Equipos mostrados correctamente por categoría.");

        } catch (SQLException e) {
            logger.error("Error al filtrar por categoría: " + categoriaSeleccionada, e);
            System.out.println("Error al filtrar por categoría: " + e);
        }
    }

    public String obtenerNombreUsuario(int idUsuario) {
        logger.info("Obteniendo nombre de usuario para id_usuario: {0}", idUsuario);
        String nombre = "";
        conexionMysql conecta = new conexionMysql();
        cn = conecta.estableceConexion();

        String sql = "SELECT nombre FROM usuarios WHERE id_usuario = ?";

        try (PreparedStatement ps = cn.prepareStatement(sql)) {
            ps.setInt(1, idUsuario);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                nombre = rs.getString("nombre");
                logger.info("Nombre de usuario obtenido:", nombre);
            } else {
                logger.warn("No se encontró usuario con id: ", idUsuario);
            }

        } catch (SQLException e) {
            logger.error("Error al obtener el nombre del usuario con id: " + idUsuario, e);
            JOptionPane.showMessageDialog(null, "Error al obtener el nombre del usuario: " + e.getMessage());
        }

        return nombre;
    }

    private void MiLista() {
        logger.info("Intentando añadir equipo seleccionado a la lista...");

        int filaSeleccionada = tablaDisponibles.getSelectedRow();

        if (filaSeleccionada != -1) {
            DefaultTableModel modeloDisponibles = (DefaultTableModel) tablaDisponibles.getModel();
            DefaultTableModel modeloSeleccionados = (DefaultTableModel) tablaSeleccionados.getModel();

            // Verificar cantidad
            String cantidadStr = txtCantidad.getText();
            if (cantidadStr.isEmpty()) {
                logger.info("Cantidad vacía al intentar añadir equipo.");
                JOptionPane.showMessageDialog(null, "Por favor, ingresa una cantidad.");
                return;
            }

            int cantidadSolicitada;
            try {
                cantidadSolicitada = Integer.parseInt(cantidadStr);
                logger.info("Cantidad solicitada: {0}", cantidadSolicitada);
            } catch (NumberFormatException e) {
                logger.warn("Cantidad inválida: {0}", cantidadStr);
                JOptionPane.showMessageDialog(null, "La cantidad debe ser un número entero.");
                return;
            }

            // Obtener el ID del equipo desde la columna 0 (oculta)
            Object idEquipo = modeloDisponibles.getValueAt(filaSeleccionada, 0);
            logger.info("ID equipo seleccionado: {0}", idEquipo);

            // Consultar el stock en la base de datos
            int stockDisponible = 0;
            try (Connection cnLocal = conecta.estableceConexion(); PreparedStatement ps = cnLocal.prepareStatement("SELECT stock FROM equipos WHERE id_equipo = ?")) {

                ps.setObject(1, idEquipo);
                ResultSet rs = ps.executeQuery();

                if (rs.next()) {
                    stockDisponible = rs.getInt("stock");
                    logger.info("Stock disponible para equipo {0}: {1}", new Object[]{idEquipo, stockDisponible});
                } else {
                    logger.info("No se encontró equipo con ID: {0}", idEquipo);
                    JOptionPane.showMessageDialog(null, "No se encontró el equipo en la base de datos.");
                    return;
                }

                if (cantidadSolicitada > stockDisponible) {
                    logger.info("Cantidad solicitada ({0}) mayor que stock disponible ({1})", new Object[]{cantidadSolicitada, stockDisponible});
                    JOptionPane.showMessageDialog(null, "No hay suficiente stock disponible.");
                    txtCantidad.setText("");
                    jDateDevolucion.setDate(null);
                    return;
                }

            } catch (SQLException e) {
                logger.error("Error al consultar el stock para equipo: " + idEquipo, e);
                JOptionPane.showMessageDialog(null, "Error al consultar el stock: " + e.getMessage());
                return;
            }

            // Obtener fecha actual desde JTextField
            String fechaHoy = txtFechaActual.getText();
            if (fechaHoy.isEmpty()) {
                logger.warn("Fecha de préstamo vacía");
                JOptionPane.showMessageDialog(null, "Por favor, ingresa una fecha de préstamo.");
                return;
            }

            // Obtener fecha de devolución desde JDateChooser
            java.util.Date fechaUtil = jDateDevolucion.getDate();
            if (fechaUtil == null) {
                logger.warn("Fecha de devolución no seleccionada");
                JOptionPane.showMessageDialog(null, "Por favor, selecciona una fecha de devolución.");
                return;
            }

            try {
                SimpleDateFormat sdfComparar = new SimpleDateFormat("yyyy-MM-dd");
                java.util.Date fechaPrestamo = sdfComparar.parse(txtFechaActual.getText());

                if (!fechaUtil.after(fechaPrestamo)) {
                    logger.warn("Fecha de devolución {0} no es posterior a fecha de préstamo {1}", new Object[]{fechaUtil, fechaPrestamo});
                    JOptionPane.showMessageDialog(null, "La fecha de devolución debe ser posterior a la fecha de préstamo.");
                    return;
                }
            } catch (ParseException ex) {
                logger.error("Error al comparar fechas: ", ex);
                JOptionPane.showMessageDialog(null, "Error al comparar las fechas: " + ex.getMessage());
                return;
            }

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String fechaDevolucionStr = sdf.format(fechaUtil);

            // Crear fila: Nro, Nombre, Cantidad, Fecha actual, Fecha devolución, Acción
            Object[] datosFila = new Object[7];
            datosFila[0] = modeloSeleccionados.getRowCount() + 1;
            datosFila[1] = idEquipo;
            datosFila[2] = modeloDisponibles.getValueAt(filaSeleccionada, 2); // Nombre
            datosFila[3] = cantidadSolicitada;
            datosFila[4] = fechaHoy;
            datosFila[5] = fechaDevolucionStr;
            datosFila[6] = "Eliminar";

            modeloSeleccionados.addRow(datosFila);
            logger.info("Equipo agregado a la lista seleccionada: {0}", datosFila[2]);
            txtCantidad.setText("");
            jDateDevolucion.setDate(null);

        } else {
            logger.info("No se ha seleccionado ningún equipo para agregar a la lista.");
            JOptionPane.showMessageDialog(null, "Selecciona un equipo de la tabla disponibles.");
        }
    }

    private void cargarFechaActual() {
        java.sql.Date fechaHoy = new java.sql.Date(System.currentTimeMillis());
        txtFechaActual.setText(fechaHoy.toString());
        logger.info("Fecha actual cargada: " + fechaHoy.toString());
    }

private void prestarEquipos() {
    DefaultTableModel modelo = (DefaultTableModel) tablaSeleccionados.getModel();

    if (modelo.getRowCount() == 0) {
        JOptionPane.showMessageDialog(null, "No hay equipos seleccionados para prestar.");
        logger.warn("Intento de prestar sin equipos seleccionados.");
        return;
    }

    // Validar sanción del usuario
    if (estaSancionado(idUsuario)) {
        JOptionPane.showMessageDialog(null, "No puedes realizar préstamos. Estás sancionado o tienes un préstamo vencido.");
        logger.warn("Usuario " + idUsuario + " intentó prestar estando sancionado.");
        return;
    }

    try (Connection cn = conecta.estableceConexion()) {
        cn.setAutoCommit(false);

        StringBuilder mensajeBuilder = new StringBuilder();
        mensajeBuilder.append("Hola,\n\n")
            .append("Tu préstamo ha sido registrado con éxito en nuestro sistema.\n")
            .append("A continuación te detallamos la información de tus préstamos:\n\n");

        String insertar = "INSERT INTO prestamos (id_usuario, id_equipo, cantidad, fecha_prestamo, fecha_devolucion_esperada, id_estado) VALUES (?, ?, ?, ?, ?, ?)";
        String updateStock = "UPDATE equipos SET stock = stock - ? WHERE id_equipo = ?";

        for (int i = 0; i < modelo.getRowCount(); i++) {
            int idEquipo = Integer.parseInt(modelo.getValueAt(i, 1).toString());
            String nombreEquipo = modelo.getValueAt(i, 2).toString();
            int cantidad = Integer.parseInt(modelo.getValueAt(i, 3).toString());
            String fechaPrestamo = modelo.getValueAt(i, 4).toString();
            String fechaDevolucion = modelo.getValueAt(i, 5).toString();

            // Insertar préstamo
            try (PreparedStatement psInsert = cn.prepareStatement(insertar)) {
                psInsert.setInt(1, idUsuario);
                psInsert.setInt(2, idEquipo);
                psInsert.setInt(3, cantidad);
                psInsert.setString(4, fechaPrestamo);
                psInsert.setString(5, fechaDevolucion);
                psInsert.setInt(6, 7); // Estado "activo" o "en préstamo"
                psInsert.executeUpdate();
            }

            // Actualizar stock
            try (PreparedStatement psUpdate = cn.prepareStatement(updateStock)) {
                psUpdate.setInt(1, cantidad);
                psUpdate.setInt(2, idEquipo);
                psUpdate.executeUpdate();
            }

            logger.info("Equipo con ID " + idEquipo + " prestado en cantidad " + cantidad);

            // Agregar detalle al mensaje
            mensajeBuilder.append("- Equipo: ").append(nombreEquipo).append("\n")
                .append("  Cantidad: ").append(cantidad).append("\n")
                .append("  Fecha de préstamo: ").append(fechaPrestamo).append("\n")
                .append("  Fecha de devolución esperada: ").append(fechaDevolucion).append("\n\n");
        }

        mensajeBuilder.append("Por favor, asegúrate de devolver los equipos en la fecha establecida para evitar penalizaciones.\n")
            .append("Puedes consultar los detalles de tus préstamos en nuestro sistema.\n\n")
            .append("Gracias por confiar en nosotros.\n\n")
            .append("Saludos cordiales,\n")
            .append("Equipo de Soporte Técnico");

        cn.commit();
        logger.info("Transacción de préstamo completada exitosamente.");

        // Enviar correo de confirmación en hilo separado
        String correo = obtenerCorreoDesdeBD(idUsuario);
        if (correo != null) {
            String asunto = "Confirmación de préstamo";
            String mensaje = mensajeBuilder.toString();
            new Thread(() -> enviarCorreo(correo, asunto, mensaje)).start();
            logger.info("Correo de confirmación enviado a " + correo);
        }

        JOptionPane.showMessageDialog(null, "Préstamos registrados exitosamente.");

        // Limpiar tabla y campos
        modelo.setRowCount(0);
        txtCantidad.setText("");
        jDateDevolucion.setDate(null);

        mostrarEquipos();

    } catch (Exception e) {
        logger.error("Error al registrar préstamos: ", e);
        JOptionPane.showMessageDialog(null, "Error al registrar préstamos: " + e.getMessage());
        try {
            if (cn != null && !cn.isClosed()) {
                cn.rollback();
                logger.info("Transacción revertida por error.");
            }
        } catch (SQLException ex) {
            logger.error("Error al hacer rollback: ", ex);
        }
    }
}



    private void actualizarTablaDisponibles() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("Nombre");
        modelo.addColumn("Descripción");
        modelo.addColumn("Modelo");
        modelo.addColumn("Marca");
        modelo.addColumn("Stock");

        tablaDisponibles.setModel(modelo);

        String sql = "SELECT e.id_equipo, e.nombre, e.descripcion, e.modelo, m.nombre_marca, e.stock "
                + "FROM equipos e "
                + "INNER JOIN marcas m ON e.id_marca = m.id_marca "
                + "WHERE e.id_equipo != 0 "
                + "ORDER BY e.id_equipo";

        try (Connection cn = conecta.estableceConexion(); PreparedStatement ps = cn.prepareStatement(sql); ResultSet rs = ps.executeQuery()) {

            while (rs.next()) {
                int id = rs.getInt("id_equipo");
                String nombre = rs.getString("nombre");
                String descripcion = rs.getString("descripcion");
                String modeloEquipo = rs.getString("modelo");
                String marca = rs.getString("nombre_marca");
                int stock = rs.getInt("stock");

                modelo.addRow(new Object[]{id, nombre, descripcion, modeloEquipo, marca, stock});
            }

            tablaDisponibles.getColumnModel().getColumn(0).setMinWidth(0);
            tablaDisponibles.getColumnModel().getColumn(0).setMaxWidth(0);
            tablaDisponibles.getColumnModel().getColumn(0).setWidth(0);

            tablaDisponibles.getColumnModel().getColumn(5).setMinWidth(0);
            tablaDisponibles.getColumnModel().getColumn(5).setMaxWidth(0);
            tablaDisponibles.getColumnModel().getColumn(5).setWidth(0);

            logger.info("Tabla de equipos disponibles actualizada correctamente.");
        } catch (SQLException e) {
            logger.error("Error al actualizar la tabla de equipos disponibles.", e);
            JOptionPane.showMessageDialog(null, "Error al actualizar la tabla de equipos disponibles.");
        }
    }

    public void enviarCorreo(String destinatario, String asunto, String mensajeTexto) {
        final String remitente = "marvin.siles.mejia.m@gmail.com";
        final String clave = "scmz hism rozf luii";

        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");

        Session session = Session.getInstance(props, new Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(remitente, clave);
            }
        });

        try {
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(remitente));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(destinatario));
            message.setSubject(asunto);
            message.setText(mensajeTexto);

            Transport.send(message);
            logger.info("Correo enviado con éxito a " + destinatario);
        } catch (MessagingException e) {
            logger.error("Error al enviar correo a " + destinatario, e);
        }
    }

    public String obtenerCorreoDesdeBD(int idUsuario) {
        String correo = null;
        try {
            cn = DriverManager.getConnection("jdbc:mysql://localhost:3306/proyecto_5sem", "root", "sqlo69");
            PreparedStatement pst = cn.prepareStatement("SELECT correo FROM usuarios WHERE id_usuario = ?");
            pst.setInt(1, idUsuario);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                correo = rs.getString("correo");
                logger.info("Correo obtenido para usuario " + idUsuario + ": " + correo);
            }
            cn.close();
        } catch (SQLException e) {
            logger.error("Error al obtener correo desde BD para usuario " + idUsuario, e);
        }
        return correo;
    }
    
private boolean estaSancionado(int idUsuario) {
    String consulta = "SELECT sancionado_hasta FROM usuarios WHERE id_usuario = ?";
    try (Connection cnx = conecta.estableceConexion();
         PreparedStatement ps = cnx.prepareStatement(consulta)) {
        ps.setInt(1, idUsuario);
        ResultSet rs = ps.executeQuery();
        if (rs.next()) {
            Date sancionHasta = rs.getDate("sancionado_hasta");
            if (sancionHasta == null) {
                return false; // No está sancionado
            } else {
                return sancionHasta.toLocalDate().isAfter(LocalDate.now());
            }
        }
    } catch (SQLException e) {
        logger.error("Error al verificar sanción: ", e);
    }
    return false; // Por defecto, permitir
}



}
