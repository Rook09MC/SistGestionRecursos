/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.proyecto_5sem;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.Month;
import java.time.format.TextStyle;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Marvin Siles
 */
public class ReportesPrestamos extends javax.swing.JPanel {

    /**
     * Creates new form ReportesPrestamos
     */
    conexionMysql conecta = new conexionMysql();
    Connection cn = conecta.estableceConexion();
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(ReportesPrestamos.class);

    public ReportesPrestamos() {
        logger.info("Inicializando ReportesPrestamos...");
        initComponents();
        cargarComboBoxMetodos();
        mostrarTodosLosPrestamos();
        logger.info("ReportesPrestamos inicializado correctamente.");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TBLreportes = new javax.swing.JTable();
        motodosComboBox = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        Graficoo = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        mesComboBox = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();

        jLabel1.setText("Reportes Prestamos ");

        TBLreportes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TBLreportes);

        motodosComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        motodosComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motodosComboBoxActionPerformed(evt);
            }
        });

        jButton1.setText("Filtrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Mostrar por Estado de Prestamo:");

        Graficoo.setBackground(new java.awt.Color(102, 102, 102));
        Graficoo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Grafico", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        Graficoo.setForeground(new java.awt.Color(255, 255, 255));
        Graficoo.setMaximumSize(new java.awt.Dimension(729, 243));

        javax.swing.GroupLayout GraficooLayout = new javax.swing.GroupLayout(Graficoo);
        Graficoo.setLayout(GraficooLayout);
        GraficooLayout.setHorizontalGroup(
            GraficooLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        GraficooLayout.setVerticalGroup(
            GraficooLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jButton2.setText("Generar Grafico");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        mesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton3.setText("jButton3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 729, Short.MAX_VALUE)
                            .addComponent(Graficoo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(motodosComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(23, 23, 23)
                                                .addComponent(jButton2))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(35, 35, 35))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(mesComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(81, 81, 81))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(motodosComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(mesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addGap(34, 34, 34)
                        .addComponent(jButton2)
                        .addGap(0, 147, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Graficoo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String seleccion = motodosComboBox.getSelectedItem().toString();
        logger.info("Opción seleccionada en combo: " + seleccion);

        DefaultTableModel modelo = null;

        switch (seleccion) {
            case "Todos los Préstamos":
                logger.info("Ejecutando mostrarTodosLosPrestamos()");
                mostrarTodosLosPrestamos();
                break;
            case "Préstamos Activos":
                logger.info("Ejecutando mostrarPrestamosActivos()");
                mostrarPrestamosActivos();
                break;
            case "Préstamos Retrasados":
                logger.info("Ejecutando mostrarPrestamosRetrasados()");
                mostrarPrestamosRetrasados();
                break;
            default:
                logger.warn("Opción no reconocida: " + seleccion);
        }

        if (modelo != null) {
            logger.info("Actualizando modelo de la tabla TBLreportes");
            TBLreportes.setModel(modelo);
        } else {
            logger.info("Modelo es null, no se actualiza la tabla TBLreportes");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void motodosComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motodosComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_motodosComboBoxActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String estadoSeleccionado = (String) motodosComboBox.getSelectedItem();
        logger.info("Estado seleccionado en combo: " + estadoSeleccionado);

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        StringBuilder sql = new StringBuilder("SELECT e.nombre AS equipo, COUNT(*) AS cantidad "
                + "FROM prestamos p "
                + "JOIN equipos e ON p.id_equipo = e.id_equipo "
                + "JOIN estado_prestamo ep ON p.id_estado = ep.id_estado ");

        boolean filtrarPorEstado = false;

        if (estadoSeleccionado != null && !estadoSeleccionado.equalsIgnoreCase("Todos los Préstamos")) {
            filtrarPorEstado = true;
            sql.append("WHERE ep.nombre_estado = ? ");
        }

        sql.append("GROUP BY e.nombre ORDER BY cantidad DESC");

        logger.info("Consulta SQL generada: " + sql.toString());

        try (PreparedStatement ps = cn.prepareStatement(sql.toString())) {
            if (filtrarPorEstado) {
                String estadoBD = "";
                switch (estadoSeleccionado) {
                    case "Préstamos Activos":
                        estadoBD = "activo";
                        break;
                    case "Préstamos Retrasados":
                        estadoBD = "retrasado";
                        break;
                    default:
                        logger.warn("Estado seleccionado no reconocido para filtro: " + estadoSeleccionado);
                }
                logger.info("Filtrando por estado en BD: " + estadoBD);
                ps.setString(1, estadoBD);
            }

            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String nombreEquipo = rs.getString("equipo");
                int cantidad = rs.getInt("cantidad");
                logger.debug("Equipo: " + nombreEquipo + ", cantidad: " + cantidad);
                dataset.addValue(cantidad, "Cantidad de Préstamos", nombreEquipo);
            }

            String titulo = "Estado de Equipos Prestados";
            if (filtrarPorEstado) {
                titulo += " - " + estadoSeleccionado;
            }

            JFreeChart barChart = ChartFactory.createBarChart(
                    titulo,
                    "Equipo",
                    "Cantidad",
                    dataset,
                    PlotOrientation.VERTICAL,
                    true, true, false);

            // Estilos del gráfico
            barChart.setBackgroundPaint(new Color(102, 102, 102));
            barChart.getPlot().setBackgroundPaint(new Color(102, 102, 102));
            barChart.getCategoryPlot().setRangeGridlinePaint(Color.WHITE);
            barChart.getTitle().setPaint(Color.WHITE);

            if (barChart.getLegend() != null) {
                barChart.getLegend().setItemPaint(Color.BLACK);
            }

            CategoryPlot plot = barChart.getCategoryPlot();
            CategoryAxis domainAxis = plot.getDomainAxis();
            domainAxis.setTickLabelPaint(Color.WHITE);
            domainAxis.setLabelPaint(Color.WHITE);

            NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
            rangeAxis.setTickLabelPaint(Color.WHITE);
            rangeAxis.setLabelPaint(Color.WHITE);

            ChartPanel chartPanel = new ChartPanel(barChart);
            chartPanel.setPreferredSize(new Dimension(Graficoo.getWidth(), Graficoo.getHeight()));

            Graficoo.removeAll();
            Graficoo.setLayout(new BorderLayout());
            Graficoo.add(chartPanel, BorderLayout.CENTER);
            Graficoo.validate();

        } catch (SQLException e) {
            logger.error( "Error al generar gráfico", e);
            JOptionPane.showMessageDialog(this, "Error al generar gráfico: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Graficoo;
    private javax.swing.JTable TBLreportes;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> mesComboBox;
    private javax.swing.JComboBox<String> motodosComboBox;
    // End of variables declaration//GEN-END:variables
public void mostrarPrestamosActivos() {
        logger.info("Ejecutando mostrarPrestamosActivos");
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Préstamo");
        modelo.addColumn("Nombre de Usuario");
        modelo.addColumn("Apellido de Usuario");
        modelo.addColumn("Nombre de Equipo");
        modelo.addColumn("Fecha de Préstamo");
        modelo.addColumn("Fecha Devolución Esperada");
        modelo.addColumn("Estado");

        TBLreportes.setModel(modelo);

        String consultaSQL = "SELECT "
                + "p.id_prestamo, "
                + "u.nombre AS nombre_usuario, "
                + "u.apellido AS apellido_usuario, "
                + "e.nombre AS nombre_equipo, "
                + "p.fecha_prestamo, "
                + "p.fecha_devolucion_esperada, "
                + "ep.nombre_estado AS estado_prestamo "
                + "FROM prestamos p "
                + "JOIN usuarios u ON p.id_usuario = u.id_usuario "
                + "JOIN equipos e ON p.id_equipo = e.id_equipo "
                + "JOIN estado_prestamo ep ON p.id_estado = ep.id_estado "
                + "WHERE ep.nombre_estado = 'activo' "
                + "ORDER BY p.fecha_devolucion_esperada";

        String data[] = new String[7];

        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(consultaSQL);
            int count = 0;
            while (rs.next()) {
                data[0] = rs.getString("id_prestamo");
                data[1] = rs.getString("nombre_usuario");
                data[2] = rs.getString("apellido_usuario");
                data[3] = rs.getString("nombre_equipo");
                data[4] = rs.getString("fecha_prestamo");
                data[5] = rs.getString("fecha_devolucion_esperada");
                data[6] = rs.getString("estado_prestamo");
                modelo.addRow(data);
                count++;
            }
            logger.info("Préstamos activos cargados: " + count);
        } catch (SQLException e) {
            logger.error("Error al mostrar los préstamos activos", e);
        }
    }

    public void mostrarPrestamosRetrasados() {
        logger.info("Ejecutando mostrarPrestamosRetrasados");
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Préstamo");
        modelo.addColumn("Nombre de Usuario");
        modelo.addColumn("Apellido de Usuario");
        modelo.addColumn("Nombre de Equipo");
        modelo.addColumn("Fecha de Préstamo");
        modelo.addColumn("Fecha Devolución Esperada");
        modelo.addColumn("Días Retrasados");
        modelo.addColumn("Estado de Préstamo");

        TBLreportes.setModel(modelo);

        String consultaSQL = "SELECT "
                + "p.id_prestamo, "
                + "u.nombre AS nombre_usuario, "
                + "u.apellido AS apellido_usuario, "
                + "e.nombre AS nombre_equipo, "
                + "p.fecha_prestamo, "
                + "p.fecha_devolucion_esperada, "
                + "DATEDIFF(NOW(), p.fecha_devolucion_esperada) AS dias_retrasados, "
                + "ep.nombre_estado AS estado_prestamo "
                + "FROM prestamos p "
                + "JOIN usuarios u ON p.id_usuario = u.id_usuario "
                + "JOIN equipos e ON p.id_equipo = e.id_equipo "
                + "JOIN estado_prestamo ep ON p.id_estado = ep.id_estado "
                + "WHERE ep.nombre_estado = 'retrasado' AND p.fecha_devolucion_esperada < NOW() "
                + "ORDER BY p.fecha_devolucion_esperada";

        String data[] = new String[8];

        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(consultaSQL);
            int count = 0;
            while (rs.next()) {
                data[0] = rs.getString("id_prestamo");
                data[1] = rs.getString("nombre_usuario");
                data[2] = rs.getString("apellido_usuario");
                data[3] = rs.getString("nombre_equipo");
                data[4] = rs.getString("fecha_prestamo");
                data[5] = rs.getString("fecha_devolucion_esperada");
                data[6] = rs.getString("dias_retrasados");
                data[7] = rs.getString("estado_prestamo");
                modelo.addRow(data);
                count++;
            }
            logger.info("Préstamos retrasados cargados: " + count);
        } catch (SQLException e) {
            logger.error("Error al mostrar los préstamos retrasados", e);
        }
    }

    public void mostrarTodosLosPrestamos() {
        logger.info("Ejecutando mostrarTodosLosPrestamos");
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Préstamo");
        modelo.addColumn("Nombre de Usuario");
        modelo.addColumn("Apellido de Usuario");
        modelo.addColumn("Equipo");
        modelo.addColumn("Fecha de Préstamo");
        modelo.addColumn("Fecha Devolución Esperada");
        modelo.addColumn("Fecha Devolución Real");
        modelo.addColumn("Estado");

        TBLreportes.setModel(modelo);

        String consultaSQL = "SELECT "
                + "p.id_prestamo, "
                + "u.nombre AS nombre_usuario, "
                + "u.apellido AS apellido_usuario, "
                + "e.nombre AS nombre_equipo, "
                + "p.fecha_prestamo, "
                + "p.fecha_devolucion_esperada, "
                + "p.fecha_devolucion_real, "
                + "ep.nombre_estado AS estado_prestamo "
                + "FROM prestamos p "
                + "JOIN usuarios u ON p.id_usuario = u.id_usuario "
                + "JOIN equipos e ON p.id_equipo = e.id_equipo "
                + "JOIN estado_prestamo ep ON p.id_estado = ep.id_estado "
                + "ORDER BY p.id_prestamo";

        String[] data = new String[8];

        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(consultaSQL);
            int count = 0;
            while (rs.next()) {
                data[0] = rs.getString("id_prestamo");
                data[1] = rs.getString("nombre_usuario");
                data[2] = rs.getString("apellido_usuario");
                data[3] = rs.getString("nombre_equipo");
                data[4] = rs.getString("fecha_prestamo");
                data[5] = rs.getString("fecha_devolucion_esperada");
                data[6] = rs.getString("fecha_devolucion_real");
                data[7] = rs.getString("estado_prestamo");
                modelo.addRow(data);
                count++;
            }
            logger.info("Total préstamos cargados: " + count);
        } catch (SQLException e) {
            logger.error("Error al mostrar todos los préstamos", e);
        }
    }

    private void cargarComboBoxMetodos() {
        logger.info("Cargando ComboBox métodos");
        motodosComboBox.removeAllItems();

        motodosComboBox.addItem("Todos los Préstamos");
        motodosComboBox.addItem("Préstamos Activos");
        motodosComboBox.addItem("Préstamos Retrasados");
    }
}
