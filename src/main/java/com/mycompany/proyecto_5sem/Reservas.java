/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.proyecto_5sem;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Marvin Siles
 */
public class Reservas extends javax.swing.JPanel {

    /**
     * Creates new form Reservas
     */
    conexionMysql conecta = new conexionMysql();
    Connection cn = conecta.estableceConexion();
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(Reservas.class);
    public Reservas() {
        initComponents();
        mostrarPrestamosReservado();
        actualizarReservasVencidas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaReserva = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setBackground(new java.awt.Color(75, 99, 130));

        tablaReserva.setBackground(new java.awt.Color(164, 181, 196));
        tablaReserva.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaReserva);

        jButton1.setBackground(new java.awt.Color(166, 136, 104));
        jButton1.setText("Habilitar Prestamo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("EQUIPOS RESERVADOS ");

        jButton2.setBackground(new java.awt.Color(166, 136, 104));
        jButton2.setText("reservas vencidas");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 662, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(100, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(292, 292, 292))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(56, 56, 56)
                        .addComponent(jButton2)
                        .addGap(182, 182, 182))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        reservasvencidas rv = new reservasvencidas();
        rv.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         int filaSeleccionada = tablaReserva.getSelectedRow();
        if (filaSeleccionada >= 0) {
            try {
                String idPrestamo = (String) tablaReserva.getValueAt(filaSeleccionada, 0);
                logger.info("Préstamo seleccionado con ID: " + idPrestamo);

                actualizarReservaAEstadoActivo(idPrestamo); // Usamos el mismo método
                logger.info("Estado del préstamo actualizado a 'En revisión'.");

                mostrarPrestamosReservado();
                logger.info("Lista de préstamos activos actualizada.");
            } catch (Exception e) {
                logger.error( "Error al actualizar el estado del préstamo o al mostrar los activos", e);
            }
        } else {
            logger.warn("No se seleccionó ningún préstamo en la tabla.");
            JOptionPane.showMessageDialog(Reservas.this, "Por favor, selecciona un préstamo de la tabla.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaReserva;
    // End of variables declaration//GEN-END:variables
public void mostrarPrestamosReservado() {
        logger.info("Iniciando la carga de equipo reservados...");
        actualizarReservasVencidas();
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Préstamo");
        modelo.addColumn("Nombre de Usuario");
        modelo.addColumn("Apellido de Usuario");
        modelo.addColumn("Nombre de Equipo");
        modelo.addColumn("Fecha de Préstamo");
        modelo.addColumn("Fecha Devolución Esperada");
        modelo.addColumn("Estado");

        tablaReserva.setModel(modelo);

        String consultaSQL = "SELECT p.id_prestamo, u.nombre AS nombre_usuario, u.apellido AS apellido_usuario, "
                + "e.nombre AS nombre_equipo, p.fecha_prestamo, p.fecha_devolucion_esperada, "
                + "ep.nombre_estado AS estado_prestamo "
                + "FROM prestamos p "
                + "JOIN usuarios u ON p.id_usuario = u.id_usuario "
                + "JOIN equipos e ON p.id_equipo = e.id_equipo "
                + "JOIN estado_prestamo ep ON p.id_estado = ep.id_estado "
                + "WHERE ep.nombre_estado = 'reservado' "
                + "ORDER BY p.id_prestamo ASC";

        String data[] = new String[7];

        try (Statement st = cn.createStatement(); ResultSet rs = st.executeQuery(consultaSQL)) {
            while (rs.next()) {
                data[0] = rs.getString("id_prestamo");
                data[1] = rs.getString("nombre_usuario");
                data[2] = rs.getString("apellido_usuario");
                data[3] = rs.getString("nombre_equipo");
                data[4] = rs.getString("fecha_prestamo");
                data[5] = rs.getString("fecha_devolucion_esperada");
                data[6] = rs.getString("estado_prestamo");
                modelo.addRow(data);
            }
            logger.info("equipo reservados cargados correctamente.");
        } catch (SQLException e) {
            logger.error( "Error al mostrar los equipo reservados.", e);
        }
    }
public void actualizarReservasVencidas() {
    logger.info("Iniciando la actualización de reservas vencidas...");

    String sql = "UPDATE prestamos " +
                 "SET id_estado = 8 " +
                 "WHERE id_estado = (SELECT id_estado FROM estado_prestamo WHERE nombre_estado = 'reservado') " +
                 "AND DATEDIFF(NOW(), fecha_prestamo) > 2";

    try (PreparedStatement ps = cn.prepareStatement(sql)) {
        int filasAfectadas = ps.executeUpdate();
        logger.info("Reservas vencidas actualizadas correctamente. Filas afectadas: " + filasAfectadas);
    } catch (SQLException e) {
        logger.error("Error al actualizar las reservas vencidas.", e);
    }
}
private void actualizarReservaAEstadoActivo(String idPrestamo) {
    logger.info("Intentando actualizar la reserva con ID " + idPrestamo + " a estado 'activo'.");

    String consultaSQL = "UPDATE prestamos SET id_estado = 1 WHERE id_prestamo = ?";
    
    try (PreparedStatement pstmt = cn.prepareStatement(consultaSQL)) {
        pstmt.setString(1, idPrestamo);
        int filasAfectadas = pstmt.executeUpdate();

        if (filasAfectadas > 0) {
            JOptionPane.showMessageDialog(this, "La reserva con ID " + idPrestamo + " ha sido activada.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            logger.info("La reserva con ID " + idPrestamo + " fue actualizada a estado 'activo'.");
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo activar la reserva.", "Error", JOptionPane.ERROR_MESSAGE);
            logger.warn("No se encontró ninguna reserva con ID " + idPrestamo + " para actualizar.");
        }
    } catch (SQLException e) {
        logger.error("Error al actualizar el estado de la reserva con ID " + idPrestamo, e);
        JOptionPane.showMessageDialog(this, "Error al actualizar el estado de la reserva: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}


}
