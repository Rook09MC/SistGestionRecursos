/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.proyecto_5sem;

import com.mycompany.proyecto_5sem.conexionMysql;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.mindrot.jbcrypt.BCrypt;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Marvin Siles
 */
public class registroo extends javax.swing.JPanel {

    /**
     * Creates new form registroo
     */
    conexionMysql conecta = new conexionMysql();
    Connection cn = conecta.estableceConexion();
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(registroo.class);

    public registroo() {
        initComponents();
        logger.info("Instancia de registroo creada, inicializando componentes.");
        mostrarUsuarios();
        logger.info("Llamado a mostrarUsuarios()");
        cargarRolesEnCombo();
        logger.info("Llamado a cargarRolesEnCombo()");
    }

    public static String hashPassword(String password) {
        logger.info("Hashing password...");
        String hashed = BCrypt.hashpw(password, BCrypt.gensalt());
        logger.info("Password hasheada correctamente.");
        return hashed;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtnombre = new javax.swing.JTextField();
        txtapellido = new javax.swing.JTextField();
        txtcorreo = new javax.swing.JTextField();
        txtclave = new javax.swing.JTextField();
        txtcombo = new javax.swing.JComboBox<>();
        registrar = new javax.swing.JButton();
        eliminar = new javax.swing.JButton();
        actualizar = new javax.swing.JButton();
        txtid = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablausuarios = new javax.swing.JTable();

        setBackground(new java.awt.Color(75, 99, 130));
        setPreferredSize(new java.awt.Dimension(950, 450));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(75, 99, 130));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Registro Nuevo Usuario/Administrador", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        txtnombre.setBackground(new java.awt.Color(164, 181, 196));
        txtnombre.setBorder(javax.swing.BorderFactory.createTitledBorder("Nombre:"));

        txtapellido.setBackground(new java.awt.Color(164, 181, 196));
        txtapellido.setBorder(javax.swing.BorderFactory.createTitledBorder("Apellido:"));

        txtcorreo.setBackground(new java.awt.Color(164, 181, 196));
        txtcorreo.setBorder(javax.swing.BorderFactory.createTitledBorder("Correo:"));

        txtclave.setBackground(new java.awt.Color(164, 181, 196));
        txtclave.setBorder(javax.swing.BorderFactory.createTitledBorder("Password:"));

        txtcombo.setBackground(new java.awt.Color(164, 181, 196));
        txtcombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Administrador", "Usuario", " " }));
        txtcombo.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo Usuario"));
        txtcombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtcomboActionPerformed(evt);
            }
        });

        registrar.setBackground(new java.awt.Color(166, 136, 104));
        registrar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        registrar.setForeground(new java.awt.Color(255, 255, 255));
        registrar.setText("Registrar");
        registrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrarActionPerformed(evt);
            }
        });

        eliminar.setBackground(new java.awt.Color(166, 136, 104));
        eliminar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        eliminar.setForeground(new java.awt.Color(255, 255, 255));
        eliminar.setText("Eliminar");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });

        actualizar.setBackground(new java.awt.Color(166, 136, 104));
        actualizar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        actualizar.setForeground(new java.awt.Color(255, 255, 255));
        actualizar.setText("Modificar");
        actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarActionPerformed(evt);
            }
        });

        txtid.setBackground(new java.awt.Color(164, 181, 196));
        txtid.setBorder(javax.swing.BorderFactory.createTitledBorder("Id"));
        txtid.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtclave, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(registrar, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(actualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtcombo, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(txtnombre, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(txtapellido, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(txtid, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                            .addGap(18, 18, 18)
                            .addComponent(txtcorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(14, 14, 14))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtid, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtcorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtapellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtnombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtclave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtcombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(actualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(registrar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        tablausuarios.setBackground(new java.awt.Color(164, 181, 196));
        tablausuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tablausuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablausuariosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablausuarios);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 618, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtcomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtcomboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtcomboActionPerformed

    private void registrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrarActionPerformed
        String nombre = txtnombre.getText();
        String apellido = txtapellido.getText();
        String correo = txtcorreo.getText();
        String passwordTextoPlano = txtclave.getText(); // o new String(txtPassword.getPassword())
        String passHasheada = hashPassword(passwordTextoPlano);

        logger.info("Intentando registrar usuario: " + nombre + " " + apellido + ", correo: " + correo + ", rol seleccionado: " + txtcombo.getSelectedItem());

        String nombreRol = txtcombo.getSelectedItem().toString();

        if (nombre.isEmpty() || apellido.isEmpty() || correo.isEmpty() || passHasheada.isEmpty() || nombreRol.equals("Seleccione Rol")) {
            logger.warn("Faltan campos obligatorios para registrar usuario.");
            JOptionPane.showMessageDialog(null, "COMPLETA TODOS LOS CAMPOS...");
        } else {
            try {
                // Buscar ID de rol
                int idRol = -1;
                String sqlRol = "SELECT id_rol FROM Roles WHERE nombre_rol = ?";
                PreparedStatement psRol = cn.prepareStatement(sqlRol);
                psRol.setString(1, nombreRol);
                ResultSet rsRol = psRol.executeQuery();

                if (rsRol.next()) {
                    idRol = rsRol.getInt("id_rol");
                    logger.info("ID de rol encontrado: " + idRol);
                } else {
                    logger.error("El rol '" + nombreRol + "' no existe en la base de datos.");
                    JOptionPane.showMessageDialog(null, "El rol '" + nombreRol + "' no existe.");
                    return;
                }

                // Insertar en la tabla Usuarios
                String sqlInsert = "INSERT INTO Usuarios (nombre, apellido, correo, clave, id_rol) VALUES (?, ?, ?, ?, ?)";
                PreparedStatement psInsert = cn.prepareStatement(sqlInsert);
                psInsert.setString(1, nombre);
                psInsert.setString(2, apellido);
                psInsert.setString(3, correo);
                psInsert.setString(4, passHasheada);
                psInsert.setInt(5, idRol);

                psInsert.executeUpdate();
                logger.info("Usuario registrado correctamente: " + nombre + " " + apellido);
                JOptionPane.showMessageDialog(null, "USUARIO REGISTRADO CORRECTAMENTE");
                mostrarUsuarios();
                limpiarEntradas();

            } catch (SQLException e) {
                logger.error( "Error al registrar usuario", e);
                JOptionPane.showMessageDialog(null, "NO SE PUDO REGISTRAR EL USUARIO: " + e.getMessage());
            }
        }


    }//GEN-LAST:event_registrarActionPerformed

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
        if (JOptionPane.showConfirmDialog(null, "¿ESTÁ SEGURO DE ELIMINAR EL USUARIO?", "CONFIRMAR", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            try {
                int idUsuario = Integer.parseInt(txtid.getText());
                logger.info("Intentando eliminar usuario con ID: " + idUsuario);

                String sql = "DELETE FROM Usuarios WHERE id_usuario = ?";
                PreparedStatement ps = cn.prepareStatement(sql);
                ps.setInt(1, idUsuario);

                int indice = ps.executeUpdate();

                if (indice > 0) {
                    logger.info("Usuario con ID " + idUsuario + " eliminado correctamente.");
                    mostrarUsuarios();   // Método que actualiza la tabla de usuarios
                    limpiarEntradas();   // Limpia los campos de entrada
                    JOptionPane.showMessageDialog(null, "USUARIO ELIMINADO CORRECTAMENTE");
                } else {
                    logger.warn("Intento de eliminación fallido: no se encontró usuario con ID " + idUsuario);
                    JOptionPane.showMessageDialog(null, "NO SELECCIONÓ NINGÚN USUARIO PARA ELIMINAR");
                }

            } catch (SQLException e) {
                logger.error( "Error al eliminar usuario", e);
                JOptionPane.showMessageDialog(null, "ERROR AL ELIMINAR EL USUARIO: " + e.getMessage());
            } catch (NumberFormatException e) {
                logger.warn("ID de usuario inválido: " + txtid.getText());
                JOptionPane.showMessageDialog(null, "ID DE USUARIO NO VÁLIDO");
            }
        }


    }//GEN-LAST:event_eliminarActionPerformed

    private void actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarActionPerformed
        try {
            // Obtener el rol seleccionado del ComboBox
            String nombreRol = txtcombo.getSelectedItem().toString();
            logger.info("Intentando actualizar usuario. Rol seleccionado: " + nombreRol);
            int idRol = -1;

            String sqlRol = "SELECT id_rol FROM Roles WHERE nombre_rol = ?";
            PreparedStatement psRol = cn.prepareStatement(sqlRol);
            psRol.setString(1, nombreRol);
            ResultSet rsRol = psRol.executeQuery();

            if (rsRol.next()) {
                idRol = rsRol.getInt("id_rol");
                logger.info("ID de rol obtenido: " + idRol);
            } else {
                logger.warn("El rol '" + nombreRol + "' no existe en la base de datos.");
                JOptionPane.showMessageDialog(null, "El rol '" + nombreRol + "' no existe.");
                return;
            }

            // Ahora hacemos la actualización del usuario
            String sql = "UPDATE Usuarios SET nombre = ?, apellido = ?, correo = ?, clave = ?, id_rol = ? WHERE id_usuario = ?";
            PreparedStatement ps = cn.prepareStatement(sql);

            ps.setString(1, txtnombre.getText());
            ps.setString(2, txtapellido.getText());
            ps.setString(3, txtcorreo.getText());
            ps.setString(4, txtclave.getText());
            ps.setInt(5, idRol);
            int idUsuario = Integer.parseInt(txtid.getText());
            ps.setInt(6, idUsuario);

            int indice = ps.executeUpdate();

            if (indice > 0) {
                logger.info("Usuario con ID " + idUsuario + " actualizado correctamente.");
                JOptionPane.showMessageDialog(null, "SE ACTUALIZARON LOS DATOS DEL USUARIO CORRECTAMENTE");
                mostrarUsuarios();
                limpiarEntradas();
            } else {
                logger.warn("No se seleccionó ningún registro para actualizar con ID: " + idUsuario);
                JOptionPane.showMessageDialog(null, "NO SELECCIONÓ NINGÚN REGISTRO PARA ACTUALIZAR");
            }

        } catch (SQLException e) {
            logger.error( "ERROR AL ACTUALIZAR USUARIO", e);
            System.out.println("ERROR AL ACTUALIZAR USUARIO: " + e);
        } catch (NumberFormatException e) {
            logger.warn("ERROR EN CONVERSIÓN DE NÚMEROS (id_usuario): " + e.getMessage());
            System.out.println("ERROR EN CONVERSIÓN DE NÚMEROS (id_usuario): " + e);
        }


    }//GEN-LAST:event_actualizarActionPerformed

    private void tablausuariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablausuariosMouseClicked
        int fila = this.tablausuarios.getSelectedRow();
        if (fila >= 0) {
            logger.info("Fila seleccionada: " + fila);
            String id = this.tablausuarios.getValueAt(fila, 0).toString();
            String nombre = this.tablausuarios.getValueAt(fila, 1).toString();
            String apellido = this.tablausuarios.getValueAt(fila, 2).toString();
            String correo = this.tablausuarios.getValueAt(fila, 3).toString();
            String clave = this.tablausuarios.getValueAt(fila, 4).toString();
            String rol = this.tablausuarios.getValueAt(fila, 5).toString();

            logger.info("Cargando datos de usuario: ID=" + id + ", Nombre=" + nombre + ", Apellido=" + apellido + ", Correo=" + correo + ", Rol=" + rol);

            registrar.setEnabled(false);
            actualizar.setEnabled(true);
            this.txtid.setText(id);
            this.txtnombre.setText(nombre);
            this.txtapellido.setText(apellido);
            this.txtcorreo.setText(correo);
            this.txtclave.setText(clave);
            this.txtcombo.setSelectedItem(rol);
        } else {
            logger.warn("No se ha seleccionado ninguna fila en la tabla usuarios.");
        }


    }//GEN-LAST:event_tablausuariosMouseClicked

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

        logger.info("Habilitando botón registrar y limpiando entradas.");

        registrar.setEnabled(true);
        limpiarEntradas();

    }//GEN-LAST:event_formMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actualizar;
    private javax.swing.JButton eliminar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton registrar;
    private javax.swing.JTable tablausuarios;
    private javax.swing.JTextField txtapellido;
    private javax.swing.JTextField txtclave;
    private javax.swing.JComboBox<String> txtcombo;
    private javax.swing.JTextField txtcorreo;
    private javax.swing.JTextField txtid;
    private javax.swing.JTextField txtnombre;
    // End of variables declaration//GEN-END:variables

    private void mostrarUsuarios() {
        logger.info("Iniciando método mostrarUsuarios");
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("Nombre");
        modelo.addColumn("Apellido");
        modelo.addColumn("Correo");
        modelo.addColumn("Clave");
        modelo.addColumn("Rol");

        tablausuarios.setModel(modelo);

        String consultaSQL = "SELECT u.id_usuario, u.nombre, u.apellido, u.correo, u.clave, r.nombre_rol "
                + "FROM Usuarios u "
                + "LEFT JOIN Roles r ON u.id_rol = r.id_rol "
                + "ORDER BY u.id_usuario";

        String[] data = new String[6];

        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(consultaSQL);
            while (rs.next()) {
                data[0] = rs.getString("id_usuario");
                data[1] = rs.getString("nombre");
                data[2] = rs.getString("apellido");
                data[3] = rs.getString("correo");
                data[4] = rs.getString("clave");
                data[5] = rs.getString("nombre_rol");
                modelo.addRow(data);
            }
            logger.info("Usuarios mostrados correctamente en la tabla.");
        } catch (SQLException e) {
            logger.error( "Error al mostrar usuarios: ", e);
            System.out.println("Error al mostrar usuarios: " + e);
        }
    }

    private void limpiarEntradas() {
        logger.info("Limpiando campos de entrada.");
        txtid.setText("");
        txtnombre.setText("");
        txtapellido.setText("");
        txtcorreo.setText("");
        txtclave.setText("");
        txtcombo.setSelectedIndex(0);
    }

    private void cargarRolesEnCombo() {
        logger.info("Cargando roles en el ComboBox.");
        txtcombo.removeAllItems();

        try {
            Connection cn = conecta.estableceConexion();
            String sql = "SELECT nombre_rol FROM Roles";
            PreparedStatement ps = cn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            txtcombo.addItem("Seleccione Rol");

            while (rs.next()) {
                txtcombo.addItem(rs.getString("nombre_rol"));
            }
            logger.info("Roles cargados correctamente en el ComboBox.");
            cn.close();
        } catch (SQLException e) {
            logger.error( "Error al cargar roles: ", e);
            JOptionPane.showMessageDialog(null, "Error al cargar roles: " + e.getMessage());
        }
    }

}
