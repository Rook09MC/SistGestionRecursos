/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.proyecto_5sem;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import com.itextpdf.text.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.Month;
import java.time.format.TextStyle;
import java.util.Locale;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtils;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Marvin Siles
 */
public class Reportes extends javax.swing.JPanel {

    /**
     * Creates new form Reportes
     */
    conexionMysql conecta = new conexionMysql();
    Connection cn = conecta.estableceConexion();
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(Reportes.class);

    public Reportes() {
        logger.info("Inicializando ventana Reportes");
        initComponents();
        logger.info("Componentes inicializados");

        cargarMesesComboBox();
        logger.info("ComboBox de meses cargado");

        mostrarReporteDePrestamos();
        logger.info("Reporte de préstamos mostrado");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaReporte = new javax.swing.JTable();
        mesComboBox = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        graficoo = new javax.swing.JPanel();
        Grafico = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setBackground(new java.awt.Color(75, 99, 130));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("REPORTES EQUIPOS");

        tablaReporte.setBackground(new java.awt.Color(164, 181, 196));
        tablaReporte.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tablaReporte);

        mesComboBox.setBackground(new java.awt.Color(164, 181, 196));
        mesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mesComboBoxActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(166, 136, 104));
        jButton1.setText("FILTRAR POR MES");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        graficoo.setBackground(new java.awt.Color(102, 102, 102));
        graficoo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Grafico", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        graficoo.setForeground(new java.awt.Color(255, 255, 255));
        graficoo.setMaximumSize(new java.awt.Dimension(668, 24));

        javax.swing.GroupLayout graficooLayout = new javax.swing.GroupLayout(graficoo);
        graficoo.setLayout(graficooLayout);
        graficooLayout.setHorizontalGroup(
            graficooLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        graficooLayout.setVerticalGroup(
            graficooLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 217, Short.MAX_VALUE)
        );

        Grafico.setBackground(new java.awt.Color(166, 136, 104));
        Grafico.setText("Generar Grafico");
        Grafico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GraficoActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(166, 136, 104));
        jButton2.setText("Exportar a PDF");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mesComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Grafico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 668, Short.MAX_VALUE)
                    .addComponent(graficoo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(40, 40, 40))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel1)
                        .addGap(26, 26, 26)
                        .addComponent(mesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(12, 12, 12)
                        .addComponent(Grafico)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(graficoo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String mesSeleccionado = (String) mesComboBox.getSelectedItem();
        logger.info("Mes seleccionado: " + mesSeleccionado);

        if (mesSeleccionado.equals("Todos los meses")) {
            logger.info("Mostrando reporte de préstamos para todos los meses");
            mostrarReporteDePrestamos();
            grafic();
        } else {
            logger.info("Mostrando reporte de préstamos para el mes: " + mesSeleccionado);
            mostrarPrestamosPorMes(mesSeleccionado);
            grafic();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void GraficoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GraficoActionPerformed
        logger.info("Generando gráfico de valoraciones");
        grafic();

    }//GEN-LAST:event_GraficoActionPerformed

    private void mesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mesComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mesComboBoxActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String mesSeleccionado = (String) mesComboBox.getSelectedItem();
        float margen = 72f;

        Document document = new Document(PageSize.A4.rotate(), margen, margen, margen, margen);
        try {
            logger.info("Inicio de generación de PDF para el mes: " + mesSeleccionado);

            String directorio = "C:\\Users\\Marvin Siles\\Documents\\REPORTES PROYECTO\\";
            String nombreBase = "reporte_Prestamos";
            String extension = ".pdf";
            int contador = 1;
            File archivo;

            do {
                archivo = new File(directorio + nombreBase + "_" + contador + extension);
                contador++;
            } while (archivo.exists());

            String ruta = archivo.getAbsolutePath();
            logger.info("Ruta de archivo PDF: " + ruta);

            PdfWriter.getInstance(document, new FileOutputStream(ruta));
            document.open();

            // Fuentes
            Font fontTitulo = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
            Font fontTexto = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
            Font fontEncabezado = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

            // Título con mes seleccionado
            Paragraph titulo = new Paragraph("Reporte de Prestamos - " + mesSeleccionado, fontTitulo);
            titulo.setAlignment(Element.ALIGN_CENTER);
            document.add(titulo);
            document.add(Chunk.NEWLINE);

            // Introducción
            Paragraph introduccion = new Paragraph(
                    "Este reporte presenta un análisis detallado de los prestamos realizadas a los equipos, "
                    + "incluyendo datos tabulares y un gráfico representativo del promedio de puntuación por equipo.",
                    fontTexto);
            introduccion.setAlignment(Element.ALIGN_JUSTIFIED);
            introduccion.setSpacingAfter(20);
            document.add(introduccion);

            // Tabla
            PdfPTable tablaPDF = new PdfPTable(tablaReporte.getColumnCount());
            tablaPDF.setWidthPercentage(100);
            tablaPDF.setSpacingBefore(10f);
            tablaPDF.setSpacingAfter(10f);

            // Encabezados con fuente negrita
            for (int i = 0; i < tablaReporte.getColumnCount(); i++) {
                PdfPCell celda = new PdfPCell(new Phrase(tablaReporte.getColumnName(i), fontEncabezado));
                celda.setBackgroundColor(BaseColor.LIGHT_GRAY);
                celda.setHorizontalAlignment(Element.ALIGN_CENTER);
                tablaPDF.addCell(celda);
            }

            // Datos tabla con fuente normal
            for (int filas = 0; filas < tablaReporte.getRowCount(); filas++) {
                for (int cols = 0; cols < tablaReporte.getColumnCount(); cols++) {
                    Object valor = tablaReporte.getValueAt(filas, cols);
                    PdfPCell celda = new PdfPCell(new Phrase(valor == null ? "" : valor.toString(), fontTexto));
                    celda.setHorizontalAlignment(Element.ALIGN_CENTER);
                    tablaPDF.addCell(celda);
                }
            }

            document.add(tablaPDF);

            // Imagen del gráfico
            BufferedImage imagenGrafico = new BufferedImage(graficoo.getWidth(), graficoo.getHeight(), BufferedImage.TYPE_INT_RGB);
            graficoo.paint(imagenGrafico.getGraphics());

            com.itextpdf.text.Image imagenPDF = com.itextpdf.text.Image.getInstance(imagenGrafico, null);
            imagenPDF.setAlignment(Element.ALIGN_CENTER);
            document.add(imagenPDF);

            logger.info("PDF generado exitosamente en: " + ruta);
            JOptionPane.showMessageDialog(this, "PDF generado con éxito en:\n" + ruta);

        } catch (DocumentException | IOException e) {
            logger.error("Error al generar PDF: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Error al generar PDF: " + e.getMessage());
            e.printStackTrace();
        } finally {
            document.close();
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Grafico;
    private javax.swing.JPanel graficoo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> mesComboBox;
    private javax.swing.JTable tablaReporte;
    // End of variables declaration//GEN-END:variables
  private void mostrarReporteDePrestamos() {
        logger.info("Iniciando carga del reporte de préstamos completo.");
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Préstamo");
        modelo.addColumn("Usuario");
        modelo.addColumn("Equipo");
        modelo.addColumn("Fecha Préstamo");
        modelo.addColumn("Fecha Devolución Esperada");
        modelo.addColumn("Fecha Devolución Real");

        String sql = "SELECT p.id_prestamo, u.nombre AS usuario, e.nombre AS equipo, "
                + "p.fecha_prestamo, p.fecha_devolucion_esperada, p.fecha_devolucion_real "
                + "FROM prestamos p "
                + "LEFT JOIN usuarios u ON p.id_usuario = u.id_usuario "
                + "LEFT JOIN equipos e ON p.id_equipo = e.id_equipo";

        try (PreparedStatement ps = cn.prepareStatement(sql); ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                Object[] fila = new Object[6];
                fila[0] = rs.getInt("id_prestamo");
                fila[1] = rs.getString("usuario");
                fila[2] = rs.getString("equipo");
                fila[3] = rs.getTimestamp("fecha_prestamo");
                fila[4] = rs.getTimestamp("fecha_devolucion_esperada");
                fila[5] = rs.getTimestamp("fecha_devolucion_real");
                modelo.addRow(fila);
            }
            tablaReporte.setModel(modelo);
            logger.info("Reporte de préstamos completo cargado correctamente.");
        } catch (SQLException e) {
            logger.error("Error al cargar el reporte de préstamos: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Error al cargar el reporte de préstamos: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void mostrarPrestamosPorMes(String mesSeleccionado) {
        logger.info("Iniciando carga de préstamos para el mes: " + mesSeleccionado);
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Préstamo");
        modelo.addColumn("Usuario");
        modelo.addColumn("Equipo");
        modelo.addColumn("Fecha Préstamo");
        modelo.addColumn("Fecha Devolución Esperada");
        modelo.addColumn("Fecha Devolución Real");

        Month month = null;
        for (Month m : Month.values()) {
            if (m.getDisplayName(TextStyle.FULL, new Locale("es", "BO")).equalsIgnoreCase(mesSeleccionado)) {
                month = m;
                break;
            }
        }

        if (month != null) {
            int numeroMes = month.getValue();
            String sql = "SELECT p.id_prestamo, u.nombre AS usuario, e.nombre AS equipo, "
                    + "p.fecha_prestamo, p.fecha_devolucion_esperada, p.fecha_devolucion_real "
                    + "FROM prestamos p "
                    + "LEFT JOIN usuarios u ON p.id_usuario = u.id_usuario "
                    + "LEFT JOIN equipos e ON p.id_equipo = e.id_equipo "
                    + "WHERE MONTH(p.fecha_prestamo) = ?";

            try (PreparedStatement ps = cn.prepareStatement(sql)) {
                ps.setInt(1, numeroMes);
                ResultSet rs = ps.executeQuery();
                llenarModeloTabla(modelo, rs);
                tablaReporte.setModel(modelo);
                logger.info("Préstamos del mes " + mesSeleccionado + " cargados correctamente.");
            } catch (SQLException e) {
                logger.error("Error al cargar los préstamos del mes " + mesSeleccionado + ": " + e.getMessage());
                JOptionPane.showMessageDialog(this, "Error al cargar los préstamos del mes: " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            logger.warn("Mes seleccionado no válido: " + mesSeleccionado);
            JOptionPane.showMessageDialog(this, "Mes seleccionado no válido.");
        }
    }

    private void llenarModeloTabla(DefaultTableModel modelo, ResultSet rs) throws SQLException {
        modelo.setRowCount(0);
        while (rs.next()) {
            Object[] fila = new Object[6];
            fila[0] = rs.getInt("id_prestamo");
            fila[1] = rs.getString("usuario");
            fila[2] = rs.getString("equipo");
            fila[3] = rs.getTimestamp("fecha_prestamo");
            fila[4] = rs.getTimestamp("fecha_devolucion_esperada");
            fila[5] = rs.getTimestamp("fecha_devolucion_real");
            modelo.addRow(fila);
        }
        logger.info("Modelo tabla llenado con los datos del ResultSet.");
    }
    // Método para cargar los meses en el ComboBox

    private void cargarMesesComboBox() {
        logger.info("Cargando meses en el ComboBox.");
        mesComboBox.addItem("Todos los meses");
        for (Month month : Month.values()) {
            mesComboBox.addItem(month.getDisplayName(TextStyle.FULL, new Locale("es", "BO")));
        }
        logger.info("Meses cargados en el ComboBox correctamente.");
    }

    public void grafic() {
        String mesSeleccionado = (String) mesComboBox.getSelectedItem();
        logger.info("Generando gráfico para el mes seleccionado: " + mesSeleccionado);

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        String sql;
        boolean filtrarPorMes = false;
        int numeroMes = 0;

        if (!mesSeleccionado.equals("Todos los meses")) {
            for (Month m : Month.values()) {
                if (m.getDisplayName(TextStyle.FULL, new Locale("es", "BO")).equalsIgnoreCase(mesSeleccionado)) {
                    numeroMes = m.getValue();
                    filtrarPorMes = true;
                    break;
                }
            }
        }

        if (filtrarPorMes) {
            sql = "SELECT e.nombre AS equipo, COUNT(*) AS cantidad "
                    + "FROM prestamos p "
                    + "JOIN equipos e ON p.id_equipo = e.id_equipo "
                    + "WHERE MONTH(p.fecha_prestamo) = ? "
                    + "GROUP BY e.nombre "
                    + "ORDER BY cantidad DESC";
            logger.info("SQL con filtro por mes: " + sql + " con parámetro mes=" + numeroMes);
        } else {
            sql = "SELECT e.nombre AS equipo, COUNT(*) AS cantidad "
                    + "FROM prestamos p "
                    + "JOIN equipos e ON p.id_equipo = e.id_equipo "
                    + "GROUP BY e.nombre "
                    + "ORDER BY cantidad DESC";
            logger.info("SQL sin filtro por mes: " + sql);
        }

        try (PreparedStatement ps = cn.prepareStatement(sql)) {
            if (filtrarPorMes) {
                ps.setInt(1, numeroMes);
            }

            ResultSet rs = ps.executeQuery();
            logger.info("Ejecutada consulta para generar gráfico.");

            while (rs.next()) {
                String nombreEquipo = rs.getString("equipo");
                int cantidad = rs.getInt("cantidad");
                dataset.addValue(cantidad, "Cantidad de Préstamos", nombreEquipo);
            }
            logger.info("Dataset para gráfico creado con éxito.");

            JFreeChart barChart = ChartFactory.createBarChart(
                    filtrarPorMes ? "Equipos más prestados en " + mesSeleccionado : "Equipos más prestados",
                    "Equipo",
                    "Cantidad",
                    dataset,
                    PlotOrientation.VERTICAL,
                    true, true, false);
            // Fondo
            barChart.setBackgroundPaint(new Color(102, 102, 102));
            barChart.getPlot().setBackgroundPaint(new Color(102, 102, 102));
            barChart.getCategoryPlot().setRangeGridlinePaint(Color.WHITE); // líneas blancas

            // Título del gráfico
            barChart.getTitle().setPaint(Color.WHITE);

            // Leyenda
            if (barChart.getLegend() != null) {
                barChart.getLegend().setItemPaint(Color.BLACK);
            }

            // Ejes
            CategoryPlot plot = barChart.getCategoryPlot();
            CategoryAxis domainAxis = plot.getDomainAxis();
            domainAxis.setTickLabelPaint(Color.WHITE);
            domainAxis.setLabelPaint(Color.WHITE);

            NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
            rangeAxis.setTickLabelPaint(Color.WHITE);
            rangeAxis.setLabelPaint(Color.WHITE);

            ChartPanel chartPanel = new ChartPanel(barChart);
            chartPanel.setPreferredSize(new Dimension(graficoo.getWidth(), graficoo.getHeight()));

            graficoo.removeAll();
            graficoo.setLayout(new BorderLayout());
            graficoo.add(chartPanel, BorderLayout.CENTER);
            graficoo.validate();

            logger.info("Gráfico mostrado correctamente en el panel.");

        } catch (SQLException e) {
            logger.error("Error al generar gráfico: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Error al generar gráfico: " + e.getMessage());
            e.printStackTrace();
        }
    }

}
