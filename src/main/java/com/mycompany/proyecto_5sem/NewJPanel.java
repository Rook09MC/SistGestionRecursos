/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.proyecto_5sem;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Marvin Siles
 */
public class NewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NewJPanel
     */
    conexionMysql conecta = new conexionMysql();
    Connection cn = conecta.estableceConexion();
    private File imagenFile;
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(NewJPanel.class);

    public NewJPanel() {
        logger.info("Iniciando constructor NewJPanel");

        initComponents();
        logger.info("Componentes inicializados");

        mostrarEquipos();
        logger.info("Equipos mostrados correctamente");

        cargarCategoriasEnCombo();
        logger.info("Categor√≠as cargadas en ComboBox");

        cargarMarcasEnCombo();
        logger.info("Marcas cargadas en ComboBox");

        logger.info("Constructor NewJPanel finalizado");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        txtmodelo = new javax.swing.JTextField();
        txtdescripcion = new javax.swing.JTextField();
        txtnumserie = new javax.swing.JTextField();
        txtid = new javax.swing.JTextField();
        txtnombre = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaequipos = new javax.swing.JTable();
        btnactualizar = new javax.swing.JButton();
        btnagregar = new javax.swing.JButton();
        btneliminar = new javax.swing.JButton();
        cboCategoria = new javax.swing.JComboBox<>();
        cboMarca = new javax.swing.JComboBox<>();
        cboEstado = new javax.swing.JComboBox<>();
        txtStock = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        Imagen = new javax.swing.JLabel();
        lblQR = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setPreferredSize(new java.awt.Dimension(750, 430));

        jPanel1.setBackground(new java.awt.Color(75, 99, 130));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        txtmodelo.setBorder(javax.swing.BorderFactory.createTitledBorder("Modelo"));
        txtmodelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtmodeloActionPerformed(evt);
            }
        });

        txtdescripcion.setBorder(javax.swing.BorderFactory.createTitledBorder("Descripcion"));
        txtdescripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtdescripcionActionPerformed(evt);
            }
        });

        txtnumserie.setBorder(javax.swing.BorderFactory.createTitledBorder("Numero Serie"));
        txtnumserie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtnumserieActionPerformed(evt);
            }
        });

        txtid.setBorder(javax.swing.BorderFactory.createTitledBorder("Id"));
        txtid.setEnabled(false);
        txtid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtidActionPerformed(evt);
            }
        });

        txtnombre.setBorder(javax.swing.BorderFactory.createTitledBorder("Nombre"));
        txtnombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtnombreActionPerformed(evt);
            }
        });

        tablaequipos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaequipos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaequiposMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaequipos);

        btnactualizar.setText("Actualizar");
        btnactualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnactualizarActionPerformed(evt);
            }
        });

        btnagregar.setText("Agregar");
        btnagregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnagregarActionPerformed(evt);
            }
        });

        btneliminar.setText("Eliminar");
        btneliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btneliminarActionPerformed(evt);
            }
        });

        cboCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Laptop", "Monitor", "Impresora" }));
        cboCategoria.setBorder(javax.swing.BorderFactory.createTitledBorder("Categoria"));

        cboMarca.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "HP", "Dell", "Epson" }));
        cboMarca.setBorder(javax.swing.BorderFactory.createTitledBorder("Marca"));

        cboEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Disponible ", "Hagotado", "Mantenimiento" }));
        cboEstado.setBorder(javax.swing.BorderFactory.createTitledBorder("Estado"));

        txtStock.setBorder(javax.swing.BorderFactory.createTitledBorder("Stock"));

        jButton1.setText("cargar imagen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Imagen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Imagen", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        lblQR.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "QR", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 770, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtnumserie, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)
                                .addComponent(txtStock, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addComponent(cboMarca, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)
                                .addComponent(cboEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(txtid, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(txtnombre, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)
                                .addComponent(txtmodelo, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtdescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(cboCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblQR, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnactualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnagregar, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btneliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Imagen, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 29, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(btnactualizar)
                        .addGap(12, 12, 12)
                        .addComponent(btnagregar)
                        .addGap(18, 18, 18)
                        .addComponent(btneliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtmodelo, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtnombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtdescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtnumserie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboMarca, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Imagen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblQR, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtmodeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtmodeloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtmodeloActionPerformed

    private void txtdescripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtdescripcionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtdescripcionActionPerformed

    private void txtnumserieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtnumserieActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtnumserieActionPerformed

    private void txtidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtidActionPerformed

    private void txtnombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtnombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtnombreActionPerformed

    private void btnactualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnactualizarActionPerformed
        try {
            logger.info("Inicio de actualizaci√≥n de equipo.");

            // Obtener la marca seleccionada del ComboBox
            String nombreMarca = cboMarca.getSelectedItem().toString();
            int idMarca = -1;

            String sqlMarca = "SELECT id_marca FROM Marcas WHERE nombre_marca = ?";
            PreparedStatement psMarca = cn.prepareStatement(sqlMarca);
            psMarca.setString(1, nombreMarca);
            ResultSet rsMarca = psMarca.executeQuery();

            if (rsMarca.next()) {
                idMarca = rsMarca.getInt("id_marca");
                logger.info("ID Marca obtenida: " + idMarca);
            } else {
                String msg = "La marca '" + nombreMarca + "' no existe.";
                logger.warn(msg);
                JOptionPane.showMessageDialog(null, msg);
                return;
            }

            // Obtener la categor√≠a seleccionada del ComboBox
            String nombreCategoria = cboCategoria.getSelectedItem().toString();
            int idCategoria = -1;

            String sqlCategoria = "SELECT id_categoria FROM Categorias WHERE nombre_categoria = ?";
            PreparedStatement psCategoria = cn.prepareStatement(sqlCategoria);
            psCategoria.setString(1, nombreCategoria);
            ResultSet rsCategoria = psCategoria.executeQuery();

            if (rsCategoria.next()) {
                idCategoria = rsCategoria.getInt("id_categoria");
                logger.info("ID Categor√≠a obtenida: " + idCategoria);
            } else {
                String msg = "La categor√≠a '" + nombreCategoria + "' no existe.";
                logger.warn(msg);
                JOptionPane.showMessageDialog(null, msg);
                return;
            }

            // Obtener el stock desde el campo de texto
            int stock = Integer.parseInt(txtStock.getText());
            logger.info("Stock le√≠do: " + stock);

            PreparedStatement ps = null;
            String sql;

            if (imagenFile != null) {
                logger.info("Actualizando equipo con nueva imagen.");
                FileInputStream fis = new FileInputStream(imagenFile);

                sql = "UPDATE Equipos SET nombre = ?, descripcion = ?, id_marca = ?, modelo = ?, numero_serie = ?, estado = ?, id_categoria = ?, stock = ?, imagen = ? WHERE id_equipo = ?";
                ps = cn.prepareStatement(sql);
                ps.setString(1, txtnombre.getText());
                ps.setString(2, txtdescripcion.getText());
                ps.setInt(3, idMarca);
                ps.setString(4, txtmodelo.getText());
                ps.setString(5, txtnumserie.getText());
                ps.setString(6, cboEstado.getSelectedItem().toString());
                ps.setInt(7, idCategoria);
                ps.setInt(8, stock);
                ps.setBinaryStream(9, fis, (int) imagenFile.length());
                ps.setInt(10, Integer.parseInt(txtid.getText())); // ID del equipo
            } else {
                logger.info("Actualizando equipo sin modificar la imagen.");
                sql = "UPDATE Equipos SET nombre = ?, descripcion = ?, id_marca = ?, modelo = ?, numero_serie = ?, estado = ?, id_categoria = ?, stock = ? WHERE id_equipo = ?";
                ps = cn.prepareStatement(sql);
                ps.setString(1, txtnombre.getText());
                ps.setString(2, txtdescripcion.getText());
                ps.setInt(3, idMarca);
                ps.setString(4, txtmodelo.getText());
                ps.setString(5, txtnumserie.getText());
                ps.setString(6, cboEstado.getSelectedItem().toString());
                ps.setInt(7, idCategoria);
                ps.setInt(8, stock);
                ps.setInt(9, Integer.parseInt(txtid.getText())); // ID del equipo
            }

            int indice = ps.executeUpdate();

            if (indice > 0) {
                logger.info("Equipo actualizado correctamente.");
                JOptionPane.showMessageDialog(null, "SE ACTUALIZARON LOS DATOS DEL EQUIPO CORRECTAMENTE");
                mostrarEquipos();
                limpiarEntradas();
                imagenFile = null; // Limpiar la imagen seleccionada despu√©s de la actualizaci√≥n
            } else {
                logger.warn("No se seleccion√≥ ning√∫n registro para actualizar.");
                JOptionPane.showMessageDialog(null, "NO SE SELECCION√ì NING√öN REGISTRO PARA ACTUALIZAR");
            }

        } catch (SQLException e) {
            logger.error("ERROR AL ACTUALIZAR EQUIPO: ", e);
            JOptionPane.showMessageDialog(null, "ERROR AL ACTUALIZAR EQUIPO: " + e.getMessage());
        } catch (NumberFormatException e) {
            logger.error("ERROR EN CONVERSI√ìN DE N√öMEROS (id_equipo o stock): ", e);
            JOptionPane.showMessageDialog(null, "ERROR: El ID y el Stock deben ser n√∫meros enteros v√°lidos.");
        } catch (FileNotFoundException e) {
            logger.error("ERROR: No se encontr√≥ el archivo de imagen: ", e);
            JOptionPane.showMessageDialog(null, "ERROR: No se encontr√≥ el archivo de imagen.");
        }


    }//GEN-LAST:event_btnactualizarActionPerformed

    private void tablaequiposMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaequiposMouseClicked
        btnagregar.setEnabled(false);
        btnactualizar.setEnabled(true);

        int fila = this.tablaequipos.getSelectedRow();

        logger.info("Fila seleccionada en tablaequipos: " + fila);

        if (fila >= 0) {
            try {
                this.txtid.setText(this.tablaequipos.getValueAt(fila, 0).toString());
                this.txtnombre.setText(this.tablaequipos.getValueAt(fila, 1).toString());
                this.txtdescripcion.setText(this.tablaequipos.getValueAt(fila, 2).toString());
                this.cboMarca.setSelectedItem(this.tablaequipos.getValueAt(fila, 3).toString());
                this.txtmodelo.setText(this.tablaequipos.getValueAt(fila, 4).toString());
                this.cboCategoria.setSelectedItem(this.tablaequipos.getValueAt(fila, 5).toString());
                this.txtStock.setText(this.tablaequipos.getValueAt(fila, 6).toString());

                logger.info("Datos del equipo cargados en los campos de texto.");

                mostrarImagen();

                int idEquipo = Integer.parseInt(this.tablaequipos.getValueAt(fila, 0).toString());
                logger.info("Obteniendo QR para idEquipo: " + idEquipo);

                ImageIcon qrIcon = obtenerQRDesdeBD(idEquipo, cn);
                if (qrIcon != null) {
                    lblQR.setIcon(qrIcon); // Muestra el QR en el JLabel
                    logger.info("QR cargado y asignado al JLabel.");
                } else {
                    logger.warn("No se encontr√≥ QR para idEquipo: " + idEquipo);
                }
            } catch (Exception e) {
                logger.error("Error al cargar datos del equipo o QR", e);
                JOptionPane.showMessageDialog(null, "Error al cargar datos del equipo o QR: " + e.getMessage());
            }
        } else {
            logger.warn("No se seleccion√≥ ninguna fila v√°lida en la tabla.");
        }


    }//GEN-LAST:event_tablaequiposMouseClicked

    private void btnagregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnagregarActionPerformed
        String nombre = txtnombre.getText();
        String descripcion = txtdescripcion.getText();
        String modelo = txtmodelo.getText();
        String nombreMarca = cboMarca.getSelectedItem().toString();
        String nombreCategoria = cboCategoria.getSelectedItem().toString();
        String stockTexto = txtStock.getText();

        if (nombre.isEmpty() || descripcion.isEmpty() || modelo.isEmpty() || stockTexto.isEmpty()) {
            logger.warn("Intento de registrar equipo con campos incompletos");
            JOptionPane.showMessageDialog(null, "COMPLETA TODOS LOS CAMPOS...");
            return;
        }

        if (imagenFile == null) {
            logger.warn("Intento de registrar equipo sin seleccionar imagen");
            JOptionPane.showMessageDialog(null, "DEBES SELECCIONAR UNA IMAGEN...");
            return;
        }

        try {
            int stock = Integer.parseInt(stockTexto);

            // Buscar ID de marca
            int idMarca = -1;
            String sqlMarca = "SELECT id_marca FROM Marcas WHERE nombre_marca = ?";
            PreparedStatement psMarca = cn.prepareStatement(sqlMarca);
            psMarca.setString(1, nombreMarca);
            ResultSet rsMarca = psMarca.executeQuery();
            if (rsMarca.next()) {
                idMarca = rsMarca.getInt("id_marca");
            } else {
                JOptionPane.showMessageDialog(null, "La marca '" + nombreMarca + "' no existe.");
                return;
            }

            // Buscar ID de categor√≠a
            int idCategoria = -1;
            String sqlCategoria = "SELECT id_categoria FROM Categorias WHERE nombre_categoria = ?";
            PreparedStatement psCategoria = cn.prepareStatement(sqlCategoria);
            psCategoria.setString(1, nombreCategoria);
            ResultSet rsCategoria = psCategoria.executeQuery();
            if (rsCategoria.next()) {
                idCategoria = rsCategoria.getInt("id_categoria");
            } else {
                JOptionPane.showMessageDialog(null, "La categor√≠a '" + nombreCategoria + "' no existe.");
                return;
            }

            // Leer imagen como InputStream
            FileInputStream fis = new FileInputStream(imagenFile);

            // Insertar equipo
            String sqlInsert = "INSERT INTO Equipos (nombre, descripcion, id_marca, modelo, id_categoria, stock, imagen) VALUES (?, ?, ?, ?, ?, ?, ?)";
            PreparedStatement psInsert = cn.prepareStatement(sqlInsert, Statement.RETURN_GENERATED_KEYS);
            psInsert.setString(1, nombre);
            psInsert.setString(2, descripcion);
            psInsert.setInt(3, idMarca);
            psInsert.setString(4, modelo);
            
            psInsert.setInt(7, idCategoria);
            psInsert.setInt(8, stock);
            psInsert.setBinaryStream(9, fis, (int) imagenFile.length());

            int filas = psInsert.executeUpdate();

            if (filas > 0) {
                ResultSet rsKeys = psInsert.getGeneratedKeys();
                int idEquipo = -1;
                if (rsKeys.next()) {
                    idEquipo = rsKeys.getInt(1);
                }

                // Contenido HTML dentro del QR
                String contenidoQR = "ID: " + idEquipo + "\n"
                + "Nombre: " + nombre + "\n"
                + "Marca: " + nombreMarca + "\n"
                + "Descripci√≥n: " + descripcion;

                // Guardar contenido en la base de datos (texto)
                String sqlUpdateQR = "UPDATE Equipos SET qr_codigo = ? WHERE id_equipo = ?";
                PreparedStatement psUpdateQR = cn.prepareStatement(sqlUpdateQR);
                psUpdateQR.setString(1, contenidoQR);
                psUpdateQR.setInt(2, idEquipo);
                psUpdateQR.executeUpdate();

                // Generar QR como imagen y guardar en disco
                int ancho = 300, alto = 300;
                QRCodeWriter qrCodeWriter = new QRCodeWriter();
                BitMatrix bitMatrix = qrCodeWriter.encode(contenidoQR, BarcodeFormat.QR_CODE, ancho, alto);
                BufferedImage qrImage = MatrixToImageWriter.toBufferedImage(bitMatrix);

                File outputDir = new File("C:\\Users\\Marvin Siles\\Documents\\QR Equipos\\");
                if (!outputDir.exists()) {
                    outputDir.mkdirs();
                }

                File outputFile = new File(outputDir, "QR_Equipo_" + idEquipo + ".png");
                ImageIO.write(qrImage, "png", outputFile);

                logger.info("C√≥digo QR generado y guardado en: " + outputFile.getAbsolutePath());

                JOptionPane.showMessageDialog(null, "EQUIPO REGISTRADO Y QR GENERADO CORRECTAMENTE");

                mostrarEquipos();
                limpiarEntradas();
                imagenFile = null;

            } else {
                JOptionPane.showMessageDialog(null, "Error al registrar equipo.");
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "EL CAMPO STOCK DEBE SER UN N√öMERO ENTERO V√ÅLIDO");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "NO SE PUDO GUARDAR EL EQUIPO: " + e.getMessage());
        }


    }//GEN-LAST:event_btnagregarActionPerformed

    private void btneliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btneliminarActionPerformed
        if (JOptionPane.showConfirmDialog(null, "¬øEST√Å SEGURO DE ELIMINAR EL EQUIPO?", "CONFIRMAR", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            try {
                int idEquipo = Integer.parseInt(txtid.getText());
                logger.info("Intentando eliminar equipo con id: " + idEquipo);

                String sql = "DELETE FROM Equipos WHERE id_equipo = ?";
                PreparedStatement ps = cn.prepareStatement(sql);
                ps.setInt(1, idEquipo);

                int indice = ps.executeUpdate();

                if (indice > 0) {
                    logger.info("Equipo eliminado correctamente con id: " + idEquipo);
                    mostrarEquipos();   // M√©todo que actualiza la tabla de equipos
                    limpiarEntradas();  // Limpia los campos de entrada
                    JOptionPane.showMessageDialog(null, "EQUIPO ELIMINADO CORRECTAMENTE");
                } else {
                    logger.warn("No se elimin√≥ ning√∫n equipo. ID no encontrado: " + idEquipo);
                    JOptionPane.showMessageDialog(null, "NO SELECCION√ì NING√öN EQUIPO PARA ELIMINAR");
                }

            } catch (SQLException e) {
                logger.error("Error al eliminar equipo", e);
                JOptionPane.showMessageDialog(null, "ERROR AL ELIMINAR EL EQUIPO: " + e.getMessage());
            } catch (NumberFormatException e) {
                logger.warn("ID de equipo no v√°lido: " + e.getMessage());
                JOptionPane.showMessageDialog(null, "ID DE EQUIPO NO V√ÅLIDO");
            }
        }


    }//GEN-LAST:event_btneliminarActionPerformed

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        btnagregar.setEnabled(true);
        limpiarEntradas();
    }//GEN-LAST:event_jPanel1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Selecciona una imagen");

// Filtro: solo im√°genes
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Im√°genes", "jpg", "jpeg", "png", "gif", "bmp"));

        int resultado = fileChooser.showOpenDialog(this); // 'this' si est√°s dentro del JFrame

        if (resultado == JFileChooser.APPROVE_OPTION) {
            File imagenFile = fileChooser.getSelectedFile();
            this.imagenFile = imagenFile;
            logger.info("Imagen seleccionada: " + imagenFile.getAbsolutePath());
        } else if (resultado == JFileChooser.CANCEL_OPTION) {
            logger.info("Selecci√≥n de imagen cancelada por el usuario.");
        } else {
            logger.warn("Error o estado desconocido en JFileChooser: resultado = " + resultado);
        }

    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Imagen;
    private javax.swing.JButton btnactualizar;
    private javax.swing.JButton btnagregar;
    private javax.swing.JButton btneliminar;
    private javax.swing.JComboBox<String> cboCategoria;
    private javax.swing.JComboBox<String> cboEstado;
    private javax.swing.JComboBox<String> cboMarca;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblQR;
    private javax.swing.JTable tablaequipos;
    private javax.swing.JTextField txtStock;
    private javax.swing.JTextField txtdescripcion;
    private javax.swing.JTextField txtid;
    private javax.swing.JTextField txtmodelo;
    private javax.swing.JTextField txtnombre;
    private javax.swing.JTextField txtnumserie;
    // End of variables declaration//GEN-END:variables
   private void mostrarEquipos() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("Nombre");
        modelo.addColumn("Descripci√≥n");
        modelo.addColumn("Marca");
        modelo.addColumn("Modelo");
        modelo.addColumn("Categor√≠a");
        modelo.addColumn("Stock"); // Nuevo campo agregado
        modelo.addColumn("Imagen"); // Indicador de imagen (puede ser un texto o √≠cono)

        tablaequipos.setModel(modelo);

        String consultaSQL = "SELECT id_equipo, Equipos.nombre, descripcion, Marcas.nombre_marca, "
                + "Equipos.modelo, Categorias.nombre_categoria, stock, imagen "
                + "FROM Equipos "
                + "INNER JOIN Marcas ON Equipos.id_marca = Marcas.id_marca "
                + "INNER JOIN Categorias ON Equipos.id_categoria = Categorias.id_categoria "
                + "WHERE id_equipo != 0 "
                + "ORDER BY id_equipo";

        String data[] = new String[10]; // Actualizado a 10 columnas

        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(consultaSQL);
            logger.info("Ejecutando consulta para mostrar equipos.");
            while (rs.next()) {
                data[0] = rs.getString("id_equipo");
                data[1] = rs.getString("nombre");
                data[2] = rs.getString("descripcion");
                data[3] = rs.getString("nombre_marca");
                data[4] = rs.getString("modelo");
                data[5] = rs.getString("nombre_categoria");
                data[6] = rs.getString("stock");

                byte[] imagenBytes = rs.getBytes("imagen");
                if (imagenBytes != null && imagenBytes.length > 0) {
                    data[7] = "S√≠";
                } else {
                    data[7] = "No";
                }

                modelo.addRow(data);
            }
            logger.info("Equipos mostrados correctamente en la tabla.");
        } catch (SQLException e) {
            logger.error("Error al mostrar equipos: " + e.getMessage());
            System.out.println("Error al mostrar equipos: " + e);
        }
    }

    private void limpiarEntradas() {
        txtid.setText("");
        txtnombre.setText("");
        txtdescripcion.setText("");
        txtmodelo.setText("");
        txtStock.setText("");

        cboMarca.setSelectedIndex(0);
        cboCategoria.setSelectedIndex(0);

        imagenFile = null;

        // Si tienes un JLabel para la imagen, resetealo aqu√≠, por ejemplo:
        // lblImagen.setIcon(null);
        logger.info("Campos de entrada limpiados y formulario restablecido.");
    }

    private void cargarCategoriasEnCombo() {
        cboCategoria.removeAllItems(); // Limpiar el combo
        logger.info("Iniciando carga de categor√≠as en el combo.");

        try {
            Connection cn = conecta.estableceConexion();
            String sql = "SELECT nombre_categoria FROM Categorias";
            PreparedStatement ps = cn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            cboCategoria.addItem("Seleccione Categoria");
            logger.info("Agregado item inicial 'Seleccione Categoria'.");

            while (rs.next()) {
                String categoria = rs.getString("nombre_categoria");
                cboCategoria.addItem(categoria);
                logger.debug("Categor√≠a agregada: " + categoria);
            }

            cn.close();
            logger.info("Carga de categor√≠as finalizada correctamente.");
        } catch (SQLException e) {
            logger.error("Error al cargar categor√≠as: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Error al cargar categor√≠as: " + e.getMessage());
        }
    }

    private void cargarMarcasEnCombo() {
        cboMarca.removeAllItems(); // Limpiar el combo
        logger.info("Iniciando carga de marcas en el combo.");

        try {
            Connection cn = conecta.estableceConexion();
            String sql = "SELECT nombre_marca FROM Marcas";
            PreparedStatement ps = cn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            cboMarca.addItem("Seleccione Marca");
            logger.info("Agregado item inicial 'Seleccione Marca'.");

            while (rs.next()) {
                String marca = rs.getString("nombre_marca");
                cboMarca.addItem(marca);
                logger.debug("Marca agregada: " + marca);
            }

            cn.close();
            logger.info("Carga de marcas finalizada correctamente.");
        } catch (SQLException e) {
            logger.error("Error al cargar marcas: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Error al cargar marcas: " + e.getMessage());
        }
    }

    private void mostrarImagen() {
        int fila = tablaequipos.getSelectedRow();

        if (fila >= 0) {
            String id = tablaequipos.getValueAt(fila, 0).toString(); // ID del equipo
            logger.info("Cargando imagen para el equipo ID: " + id);

            try {
                String sql = "SELECT imagen FROM Equipos WHERE id_equipo = ?";
                PreparedStatement ps = cn.prepareStatement(sql);
                ps.setInt(1, Integer.parseInt(id));
                ResultSet rs = ps.executeQuery();

                if (rs.next()) {
                    byte[] bytesImagen = rs.getBytes("imagen");

                    if (bytesImagen != null && bytesImagen.length > 0) {
                        ImageIcon icon = new ImageIcon(bytesImagen);
                        Icon imagenEscalada = new ImageIcon(
                                icon.getImage().getScaledInstance(Imagen.getWidth(), Imagen.getHeight(), Image.SCALE_SMOOTH)
                        );
                        Imagen.setIcon(imagenEscalada);
                        logger.info("Imagen cargada y mostrada correctamente.");
                    } else {
                        Imagen.setIcon(null); // Si no hay imagen
                        logger.warn("El equipo ID " + id + " no tiene imagen.");
                        JOptionPane.showMessageDialog(null, "Este equipo no tiene imagen.");
                    }
                }

            } catch (Exception e) {
                logger.error("Error al cargar imagen para el equipo ID " + id + ": " + e.getMessage());
                JOptionPane.showMessageDialog(null, "Error al cargar imagen: " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            logger.warn("No se ha seleccionado ninguna fila para mostrar imagen.");
        }
    }

    public BufferedImage generarQRCodeImagen(String contenido, int ancho, int alto) throws WriterException {
        logger.info("Generando c√≥digo QR para contenido: " + contenido);
        QRCodeWriter qrCodeWriter = new QRCodeWriter();
        BitMatrix bitMatrix = qrCodeWriter.encode(contenido, BarcodeFormat.QR_CODE, ancho, alto);
        logger.info("C√≥digo QR generado correctamente.");
        return MatrixToImageWriter.toBufferedImage(bitMatrix);
    }

    public ImageIcon obtenerQRDesdeBD(int idEquipo, Connection cn) {
        logger.info("Obteniendo c√≥digo QR desde BD para equipo ID: " + idEquipo);
        try {
            String contenidoQR = null;
            String sql = "SELECT qr_codigo FROM Equipos WHERE id_equipo = ?";
            PreparedStatement ps = cn.prepareStatement(sql);
            ps.setInt(1, idEquipo);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                contenidoQR = rs.getString("qr_codigo");
                logger.info("Contenido QR recuperado: " + contenidoQR);
            } else {
                logger.warn("No se encontr√≥ el QR para el equipo ID: " + idEquipo);
                JOptionPane.showMessageDialog(null, "No se encontr√≥ el QR para el equipo.");
                return null;
            }

            BitMatrix matrix = new MultiFormatWriter().encode(contenidoQR, BarcodeFormat.QR_CODE, 150, 150);
            BufferedImage image = MatrixToImageWriter.toBufferedImage(matrix);

            logger.info("C√≥digo QR generado a imagen correctamente.");
            return new ImageIcon(image);

        } catch (Exception e) {
            logger.error("Error al generar QR para equipo ID " + idEquipo + ": " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Error al generar QR: " + e.getMessage());
            return null;
        }
    }

}
