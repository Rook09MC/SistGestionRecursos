/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.proyecto_5sem;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Marvin Siles
 */
public class HistorialPrestamos extends javax.swing.JPanel {

    /**
     * Creates new form HistorialPrestamos
     */
    conexionMysql conecta = new conexionMysql();
    Connection cn = conecta.estableceConexion();
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(HistorialPrestamos.class);

    public HistorialPrestamos() {
        initComponents();
        logger.info("Inicializando HistorialPrestamos...");
        mostrarTodosLosPrestamos();
        logger.info("Se ha cargado la lista de todos los préstamos.");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaActivos = new javax.swing.JTable();

        setBackground(new java.awt.Color(75, 99, 130));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("HISTORIAL DE PRESTAMOS");

        tablaActivos.setBackground(new java.awt.Color(164, 181, 196));
        tablaActivos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaActivos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 665, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(339, 339, 339)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(190, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaActivos;
    // End of variables declaration//GEN-END:variables
    public void mostrarTodosLosPrestamos() {
        logger.info("Iniciando carga de todos los préstamos...");

        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Préstamo");
        modelo.addColumn("Nombre de Usuario");
        modelo.addColumn("Apellido de Usuario");
        modelo.addColumn("Equipo");
        modelo.addColumn("Fecha de Préstamo");
        modelo.addColumn("Fecha Devolución Esperada");
        modelo.addColumn("Fecha Devolución Real");
        modelo.addColumn("Estado");

        tablaActivos.setModel(modelo); // Ajusta según el nombre real de tu JTable

        String consultaSQL = "SELECT "
                + "p.id_prestamo, "
                + "u.nombre AS nombre_usuario, "
                + "u.apellido AS apellido_usuario, "
                + "e.nombre AS nombre_equipo, "
                + "p.fecha_prestamo, "
                + "p.fecha_devolucion_esperada, "
                + "p.fecha_devolucion_real, "
                + "ep.nombre_estado AS estado_prestamo "
                + "FROM prestamos p "
                + "JOIN usuarios u ON p.id_usuario = u.id_usuario "
                + "JOIN equipos e ON p.id_equipo = e.id_equipo "
                + "JOIN estado_prestamo ep ON p.id_estado = ep.id_estado "
                + "ORDER BY p.id_prestamo";

        String[] data = new String[8];

        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(consultaSQL);
            while (rs.next()) {
                data[0] = rs.getString("id_prestamo");
                data[1] = rs.getString("nombre_usuario");
                data[2] = rs.getString("apellido_usuario");
                data[3] = rs.getString("nombre_equipo");
                data[4] = rs.getString("fecha_prestamo");
                data[5] = rs.getString("fecha_devolucion_esperada");
                data[6] = rs.getString("fecha_devolucion_real");
                data[7] = rs.getString("estado_prestamo");
                modelo.addRow(data);
            }
            logger.info("Carga de préstamos completada con éxito. Filas cargadas: " + modelo.getRowCount());
        } catch (SQLException e) {
            logger.error( "Error al mostrar todos los préstamos", e);
        }
    }

}
