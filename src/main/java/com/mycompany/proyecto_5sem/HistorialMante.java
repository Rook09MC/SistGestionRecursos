/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.proyecto_5sem;

import java.awt.Component;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Marvin Siles
 */
public class HistorialMante extends javax.swing.JPanel {

    /**
     * Creates new form HistorialMante
     */
    conexionMysql conecta = new conexionMysql();
    Connection cn = conecta.estableceConexion();
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(HistorialMante.class);

    public HistorialMante() {
        initComponents();
        logger.info("Inicializando HistorialMante...");
        mostrarMantenimientos();
        logger.info("Mantenimientos mostrados correctamente.");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaMante = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDescripcion = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNombreEquipo = new javax.swing.JTextField();
        txtIdMantenimiento = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(75, 99, 130));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("<html>HISTORIAL<br>MANTENIMIENTO </html>\n");

        tablaMante.setBackground(new java.awt.Color(164, 181, 196));
        tablaMante.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaMante.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaManteMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaMante);

        txtDescripcion.setBackground(new java.awt.Color(164, 181, 196));
        txtDescripcion.setColumns(20);
        txtDescripcion.setLineWrap(true);
        txtDescripcion.setRows(5);
        txtDescripcion.setWrapStyleWord(true);
        jScrollPane2.setViewportView(txtDescripcion);

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Descripcion:");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Nombre del Equipo:");

        txtNombreEquipo.setBackground(new java.awt.Color(164, 181, 196));

        txtIdMantenimiento.setBackground(new java.awt.Color(164, 181, 196));

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("ID Mantenimiento:");

        jButton1.setBackground(new java.awt.Color(166, 136, 104));
        jButton1.setText("Equipo en Funcionamiento");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(115, 115, 115))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                            .addComponent(txtNombreEquipo)
                            .addComponent(txtIdMantenimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(29, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(164, 164, 164))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(84, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtIdMantenimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtNombreEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel3))
                .addGap(33, 33, 33)
                .addComponent(jButton1)
                .addGap(54, 54, 54))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tablaManteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaManteMouseClicked
        int fila = this.tablaMante.getSelectedRow();

        if (fila >= 0) {
            logger.info("Fila seleccionada: " + fila);
            // Suponiendo que tienes estos campos en tu formulario
            this.txtNombreEquipo.setText(this.tablaMante.getValueAt(fila, 1).toString());  // Nombre del equipo
            this.txtIdMantenimiento.setText(this.tablaMante.getValueAt(fila, 0).toString()); // ID del mantenimiento
            this.txtDescripcion.setText(this.tablaMante.getValueAt(fila, 2).toString());   // DescripciÃ³n (en JTextArea)
            logger.info("Datos cargados en formulario desde fila " + fila);
        } else {
            logger.warn("Intento de seleccionar fila pero no hay ninguna fila seleccionada");
            JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguna fila.");
        }


    }//GEN-LAST:event_tablaManteMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int filaSeleccionada = tablaMante.getSelectedRow();

        if (filaSeleccionada >= 0) {
            String idPrestamo = tablaMante.getValueAt(filaSeleccionada, 0).toString();
            logger.info("Fila seleccionada: " + filaSeleccionada + ", idPrestamo: " + idPrestamo);

            Reparacion repa = new Reparacion();
            repa.marcarComoDevuelto(idPrestamo);
            logger.info("PrÃ©stamo marcado como devuelto: " + idPrestamo);

            // llamamos tambiÃ©n al mÃ©todo que marca el mantenimiento como resuelto
            marcarMantenimientoComoResuelto(idPrestamo);
            logger.info("Mantenimiento marcado como resuelto para idPrestamo: " + idPrestamo);

            mostrarMantenimientos(); // Recarga la tabla para mostrar el cambio
            logger.info("Tabla de mantenimientos recargada despuÃ©s de marcar como devuelto.");

        } else {
            logger.warn("Intento de marcar como devuelto sin seleccionar fila en tablaMante.");
            JOptionPane.showMessageDialog(
                    HistorialMante.this,
                    "Por favor, selecciona un prÃ©stamo de la tabla.",
                    "Advertencia",
                    JOptionPane.WARNING_MESSAGE
            );
        }

    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaMante;
    private javax.swing.JTextArea txtDescripcion;
    private javax.swing.JTextField txtIdMantenimiento;
    private javax.swing.JTextField txtNombreEquipo;
    // End of variables declaration//GEN-END:variables

    private void mostrarMantenimientos() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Mantenimiento");
        modelo.addColumn("Nombre de Equipo");
        modelo.addColumn("DescripciÃ³n del Mantenimiento");
        modelo.addColumn("Costo del Mantenimiento");
        modelo.addColumn("Estado");

        tablaMante.setModel(modelo);

        String consultaSQL = "SELECT "
                + "m.id_mantenimiento, "
                + "e.nombre AS nombre_equipo, "
                + "m.descripcion AS descripcion_mantenimiento, "
                + "m.costo AS costo_mantenimiento, "
                + "m.estado_mantenimiento "
                + "FROM mantenimiento m "
                + "JOIN equipos e ON m.id_equipo = e.id_equipo "
                + "WHERE m.estado_mantenimiento = 'en proceso'";  // solo en proceso

        String data[] = new String[5];

        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(consultaSQL);
            logger.info("Ejecutando consulta para mostrar mantenimientos.");
            while (rs.next()) {
                data[0] = rs.getString("id_mantenimiento");
                data[1] = rs.getString("nombre_equipo");
                data[2] = rs.getString("descripcion_mantenimiento");
                data[3] = rs.getString("costo_mantenimiento");
                data[4] = rs.getString("estado_mantenimiento");
                modelo.addRow(data);
            }
            logger.info("Mantenimientos mostrados correctamente.");
        } catch (SQLException e) {
            logger.error( "Error al mostrar los mantenimientos", e);
            JOptionPane.showMessageDialog(null, "Error al mostrar los mantenimientos: " + e.getMessage());
        }
    }

    private void marcarMantenimientoComoResuelto(String idMantenimiento) {
        String updateSQL
                = "UPDATE mantenimiento "
                + "SET estado_mantenimiento = 'Resuelto' "
                + "WHERE id_mantenimiento = ?";
        try (PreparedStatement pst = cn.prepareStatement(updateSQL)) {
            pst.setString(1, idMantenimiento);
            int filas = pst.executeUpdate();
            if (filas > 0) {
                logger.info("Mantenimiento " + idMantenimiento + " marcado como Resuelto.");
                JOptionPane.showMessageDialog(
                        this,
                        "Mantenimiento " + idMantenimiento + " marcado como Resuelto.",
                        "Ãxito",
                        JOptionPane.INFORMATION_MESSAGE
                );
                mostrarMantenimientos();
            } else {
                logger.warn("No se encontrÃ³ ningÃºn mantenimiento con ID " + idMantenimiento);
                JOptionPane.showMessageDialog(
                        this,
                        "No se encontrÃ³ ningÃºn mantenimiento con ID " + idMantenimiento,
                        "Advertencia",
                        JOptionPane.WARNING_MESSAGE
                );
            }
        } catch (SQLException ex) {
            logger.error( "Error al actualizar estado del mantenimiento: " + idMantenimiento, ex);
            JOptionPane.showMessageDialog(
                    this,
                    "Error al actualizar estado: " + ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

}
