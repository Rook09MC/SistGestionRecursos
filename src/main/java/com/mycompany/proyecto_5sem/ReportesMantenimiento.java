/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.proyecto_5sem;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.Month;
import java.time.format.TextStyle;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Marvin Siles
 */
public class ReportesMantenimiento extends javax.swing.JPanel {

    /**
     * Creates new form ReportesMantenimiento
     */
    conexionMysql conecta = new conexionMysql();
    Connection cn = conecta.estableceConexion();
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(ReportesMantenimiento.class);

    public ReportesMantenimiento() {
        logger.info("Inicializando ReportesMantenimiento...");
        initComponents();
        logger.info("Componentes inicializados.");

        cargarMesesComboBox();
        logger.info("Meses cargados en el ComboBox.");

        mostrarMantenimientos();
        logger.info("Mantenimientos mostrados correctamente.");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaReporMante = new javax.swing.JTable();
        comboEstadoMantenimiento = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        Graficoo = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();

        setBackground(new java.awt.Color(75, 99, 130));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("<html>REPORTES<br>MANTENIMIENTO </html> ");

        tablaReporMante.setBackground(new java.awt.Color(164, 181, 196));
        tablaReporMante.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaReporMante);

        comboEstadoMantenimiento.setBackground(new java.awt.Color(164, 181, 196));
        comboEstadoMantenimiento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton1.setBackground(new java.awt.Color(166, 136, 104));
        jButton1.setText("aplicar filtro");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("mostrar por estado");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("FILTRO");

        jButton2.setBackground(new java.awt.Color(166, 136, 104));
        jButton2.setText("Generar Grafico");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Graficoo.setBackground(new java.awt.Color(102, 102, 102));
        Graficoo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Grafico", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        Graficoo.setForeground(new java.awt.Color(255, 255, 255));
        Graficoo.setMaximumSize(new java.awt.Dimension(696, 224));

        javax.swing.GroupLayout GraficooLayout = new javax.swing.GroupLayout(Graficoo);
        Graficoo.setLayout(GraficooLayout);
        GraficooLayout.setHorizontalGroup(
            GraficooLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        GraficooLayout.setVerticalGroup(
            GraficooLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 201, Short.MAX_VALUE)
        );

        jButton3.setBackground(new java.awt.Color(166, 136, 104));
        jButton3.setText("Exportar a PDF");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
                    .addComponent(Graficoo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(comboEstadoMantenimiento, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(65, 65, 65))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addContainerGap(66, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(Graficoo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(comboEstadoMantenimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(57, 57, 57)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addGap(66, 66, 66))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String mesSeleccionado = (String) comboEstadoMantenimiento.getSelectedItem();
        logger.info("Mes seleccionado: " + mesSeleccionado);

        if (mesSeleccionado.equals("Todos los meses")) {
            logger.info("Mostrando todos los mantenimientos (sin filtro por mes)");
            graficoCantidadMantenimientos();  // 0 indica sin filtro
            mostrarMantenimientos(); // Muestra todas las valoraciones
        } else {
            Month month = null;
            for (Month m : Month.values()) {
                if (m.getDisplayName(TextStyle.FULL, new Locale("es", "BO")).equalsIgnoreCase(mesSeleccionado)) {
                    month = m;
                    break;
                }
            }

            if (month != null) {
                int numeroMes = month.getValue();
                logger.info("Filtrando por mes: " + mesSeleccionado + " (número: " + numeroMes + ")");
                graficoCantidadMantenimientosPorMes(mesSeleccionado); // Genera gráfico filtrado por mes
                mostrarMantenimientosPorMes(mesSeleccionado); // Muestra los datos en la tabla filtrados por mes
            } else {
                logger.warn("Mes seleccionado no válido: " + mesSeleccionado);
                JOptionPane.showMessageDialog(this, "Mes seleccionado no válido.");
            }
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        String estadoSeleccionado = (String) comboEstadoMantenimiento.getSelectedItem();
        logger.info("Estado seleccionado para el gráfico: " + estadoSeleccionado);

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        String sql;
        boolean filtrarPorEstado = false;

        if (estadoSeleccionado != null && !estadoSeleccionado.equalsIgnoreCase("Todos")) {
            filtrarPorEstado = true;
            sql = "SELECT e.nombre AS equipo, COUNT(*) AS cantidad "
                    + "FROM mantenimiento m "
                    + "JOIN equipos e ON m.id_equipo = e.id_equipo "
                    + "WHERE LOWER(m.estado_mantenimiento) = ? "
                    + "GROUP BY e.nombre "
                    + "ORDER BY cantidad DESC";
            logger.info("Consulta SQL con filtro por estado: " + sql);
        } else {
            sql = "SELECT e.nombre AS equipo, COUNT(*) AS cantidad "
                    + "FROM mantenimiento m "
                    + "JOIN equipos e ON m.id_equipo = e.id_equipo "
                    + "GROUP BY e.nombre "
                    + "ORDER BY cantidad DESC";
            logger.info("Consulta SQL sin filtro por estado: " + sql);
        }

        try (PreparedStatement ps = cn.prepareStatement(sql)) {
            if (filtrarPorEstado) {
                ps.setString(1, estadoSeleccionado.toLowerCase());
                logger.info("Parámetro de estado aplicado: " + estadoSeleccionado.toLowerCase());
            }

            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String nombreEquipo = rs.getString("equipo");
                int cantidad = rs.getInt("cantidad");
                dataset.addValue(cantidad, "Cantidad de mantenimientos", nombreEquipo);
                logger.debug("Equipo: " + nombreEquipo + ", Cantidad: " + cantidad);
            }

            JFreeChart barChart = ChartFactory.createBarChart(
                    filtrarPorEstado ? "Mantenimientos por equipo - Estado: " + estadoSeleccionado
                            : "Mantenimientos por equipo",
                    "Equipo",
                    "Cantidad",
                    dataset,
                    PlotOrientation.VERTICAL,
                    true, true, false);

            barChart.setBackgroundPaint(new Color(102, 102, 102));
            barChart.getPlot().setBackgroundPaint(new Color(102, 102, 102));
            barChart.getCategoryPlot().setRangeGridlinePaint(Color.WHITE);
            barChart.getTitle().setPaint(Color.WHITE);

            if (barChart.getLegend() != null) {
                barChart.getLegend().setItemPaint(Color.BLACK);
            }

            CategoryPlot plot = barChart.getCategoryPlot();
            CategoryAxis domainAxis = plot.getDomainAxis();
            domainAxis.setTickLabelPaint(Color.WHITE);
            domainAxis.setLabelPaint(Color.WHITE);

            NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
            rangeAxis.setTickLabelPaint(Color.WHITE);
            rangeAxis.setLabelPaint(Color.WHITE);

            ChartPanel chartPanel = new ChartPanel(barChart);
            chartPanel.setPreferredSize(new Dimension(Graficoo.getWidth(), Graficoo.getHeight()));

            Graficoo.removeAll();
            Graficoo.setLayout(new BorderLayout());
            Graficoo.add(chartPanel, BorderLayout.CENTER);
            Graficoo.validate();

            logger.info("Gráfico generado correctamente.");

        } catch (SQLException e) {
            logger.error("Error al generar gráfico: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Error al generar gráfico: " + e.getMessage());
            e.printStackTrace();
        }


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String mesSeleccionado = (String) comboEstadoMantenimiento.getSelectedItem();
        logger.info("Generando PDF para el mes: " + mesSeleccionado);

        float margen = 72f;
        Document document = new Document(PageSize.A4.rotate(), margen, margen, margen, margen);

        try {
            String directorio = "C:\\Users\\Marvin Siles\\Documents\\REPORTES PROYECTO\\";
            String nombreBase = "reporte_Mantenimientos";
            String extension = ".pdf";
            int contador = 1;
            File archivo;

            do {
                archivo = new File(directorio + nombreBase + "_" + contador + extension);
                contador++;
            } while (archivo.exists());

            String ruta = archivo.getAbsolutePath();
            logger.info("Ruta del archivo PDF: " + ruta);

            PdfWriter.getInstance(document, new FileOutputStream(ruta));
            document.open();

            // Fuentes
            Font fontTitulo = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
            Font fontTexto = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
            Font fontEncabezado = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

            // Título
            Paragraph titulo = new Paragraph("Reporte de Mantenimientos - " + mesSeleccionado, fontTitulo);
            titulo.setAlignment(Element.ALIGN_CENTER);
            document.add(titulo);
            document.add(Chunk.NEWLINE);

            // Introducción
            Paragraph introduccion = new Paragraph(
                    "Este reporte presenta un análisis detallado de los mantenimientos realizados a los equipos, "
                    + "incluyendo datos tabulares y un gráfico representativo de la cantidad de mantenimientos por equipo.",
                    fontTexto);
            introduccion.setAlignment(Element.ALIGN_JUSTIFIED);
            introduccion.setSpacingAfter(20);
            document.add(introduccion);

            // Tabla PDF
            PdfPTable tablaPDF = new PdfPTable(tablaReporMante.getColumnCount());
            tablaPDF.setWidthPercentage(100);
            tablaPDF.setSpacingBefore(10f);
            tablaPDF.setSpacingAfter(10f);

            // Encabezados
            for (int i = 0; i < tablaReporMante.getColumnCount(); i++) {
                PdfPCell celda = new PdfPCell(new Phrase(tablaReporMante.getColumnName(i), fontEncabezado));
                celda.setBackgroundColor(BaseColor.LIGHT_GRAY);
                celda.setHorizontalAlignment(Element.ALIGN_CENTER);
                tablaPDF.addCell(celda);
            }

            // Datos de la tabla
            for (int filas = 0; filas < tablaReporMante.getRowCount(); filas++) {
                for (int cols = 0; cols < tablaReporMante.getColumnCount(); cols++) {
                    Object valor = tablaReporMante.getValueAt(filas, cols);
                    PdfPCell celda = new PdfPCell(new Phrase(valor == null ? "" : valor.toString(), fontTexto));
                    celda.setHorizontalAlignment(Element.ALIGN_CENTER);
                    tablaPDF.addCell(celda);
                }
            }

            document.add(tablaPDF);
            logger.info("Tabla de mantenimientos añadida al PDF.");

            // Imagen del gráfico
            BufferedImage imagenGrafico = new BufferedImage(Graficoo.getWidth(), Graficoo.getHeight(), BufferedImage.TYPE_INT_RGB);
            Graficoo.paint(imagenGrafico.getGraphics());

            com.itextpdf.text.Image imagenPDF = com.itextpdf.text.Image.getInstance(imagenGrafico, null);
            imagenPDF.setAlignment(Element.ALIGN_CENTER);
            document.add(imagenPDF);

            logger.info("Gráfico de mantenimientos añadido al PDF.");
            JOptionPane.showMessageDialog(this, "PDF de mantenimientos generado con éxito en:\n" + ruta);

        } catch (DocumentException | IOException e) {
            logger.error("Error al generar PDF: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Error al generar PDF: " + e.getMessage());
            e.printStackTrace();
        } finally {
            document.close();
            logger.info("Documento PDF cerrado.");
        }
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Graficoo;
    private javax.swing.JComboBox<String> comboEstadoMantenimiento;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaReporMante;
    // End of variables declaration//GEN-END:variables
    private void mostrarMantenimientos() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Mantenimiento");
        modelo.addColumn("Nombre de Equipo");
        modelo.addColumn("Descripción del Mantenimiento");
        modelo.addColumn("Costo del Mantenimiento");
        modelo.addColumn("Estado");

        tablaReporMante.setModel(modelo);

        String consultaSQL = "SELECT "
                + "m.id_mantenimiento, "
                + "e.nombre AS nombre_equipo, "
                + "m.descripcion AS descripcion_mantenimiento, "
                + "m.costo AS costo_mantenimiento, "
                + "m.estado_mantenimiento "
                + "FROM mantenimiento m "
                + "JOIN equipos e ON m.id_equipo = e.id_equipo ";

        String data[] = new String[5];

        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(consultaSQL);
            while (rs.next()) {
                data[0] = rs.getString("id_mantenimiento");
                data[1] = rs.getString("nombre_equipo");
                data[2] = rs.getString("descripcion_mantenimiento");
                data[3] = rs.getString("costo_mantenimiento");
                data[4] = rs.getString("estado_mantenimiento");
                modelo.addRow(data);
            }
            logger.info("Mantenimientos cargados correctamente.");
        } catch (SQLException e) {
            logger.error( "Error al mostrar los mantenimientos", e);
        }
    }

    private void mostrarMantenimientosPorMes(String mesSeleccionado) {
        logger.info("Filtrando mantenimientos por mes: " + mesSeleccionado);

        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Mantenimiento");
        modelo.addColumn("Nombre de Equipo");
        modelo.addColumn("Descripción del Mantenimiento");
        modelo.addColumn("Costo del Mantenimiento");
        modelo.addColumn("Estado");

        // Convertir el nombre del mes en español al número del mes
        Month month = null;
        for (Month m : Month.values()) {
            if (m.getDisplayName(TextStyle.FULL, new Locale("es", "BO")).equalsIgnoreCase(mesSeleccionado)) {
                month = m;
                break;
            }
        }

        if (month != null) {
            int numeroMes = month.getValue();
            String sql = "SELECT m.id_mantenimiento, e.nombre AS nombre_equipo, "
                    + "m.descripcion AS descripcion_mantenimiento, m.costo AS costo_mantenimiento, "
                    + "m.estado_mantenimiento, m.fecha_mantenimiento "
                    + "FROM mantenimiento m "
                    + "JOIN equipos e ON m.id_equipo = e.id_equipo "
                    + "WHERE MONTH(m.fecha_mantenimiento) = ?";

            try (PreparedStatement ps = cn.prepareStatement(sql)) {
                ps.setInt(1, numeroMes);
                ResultSet rs = ps.executeQuery();

                while (rs.next()) {
                    Object[] fila = new Object[5];
                    fila[0] = rs.getString("id_mantenimiento");
                    fila[1] = rs.getString("nombre_equipo");
                    fila[2] = rs.getString("descripcion_mantenimiento");
                    fila[3] = rs.getString("costo_mantenimiento");
                    fila[4] = rs.getString("estado_mantenimiento");
                    modelo.addRow(fila);
                }

                tablaReporMante.setModel(modelo);
                logger.info("Mantenimientos del mes " + mesSeleccionado + " cargados correctamente.");

            } catch (SQLException e) {
                logger.error("Error al cargar los mantenimientos del mes " + mesSeleccionado, e);
                JOptionPane.showMessageDialog(this, "Error al cargar los mantenimientos del mes: " + e.getMessage());
            }

        } else if (mesSeleccionado.equalsIgnoreCase("Todos los meses")) {
            logger.info("Seleccionado: Todos los meses. Cargando todos los registros...");
            mostrarMantenimientos();
        } else {
            logger.warn("Mes seleccionado no válido: " + mesSeleccionado);
            JOptionPane.showMessageDialog(this, "Mes seleccionado no válido.");
        }
    }

    private void cargarMesesComboBox() {
        logger.info("Cargando meses en el ComboBox...");
        comboEstadoMantenimiento.addItem("Todos los meses");
        for (Month month : Month.values()) {
            comboEstadoMantenimiento.addItem(month.getDisplayName(TextStyle.FULL, new Locale("es", "BO")));
        }
        logger.info("Meses cargados correctamente en el ComboBox.");
    }

    public void graficoCantidadMantenimientos() {
        logger.info("Generando gráfico de cantidad de mantenimientos por equipo.");

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        String sql = "SELECT e.nombre AS equipo, COUNT(*) AS cantidad_mantenimientos "
                + "FROM mantenimiento m "
                + "JOIN equipos e ON m.id_equipo = e.id_equipo "
                + "GROUP BY e.nombre "
                + "ORDER BY cantidad_mantenimientos DESC";

        try (PreparedStatement ps = cn.prepareStatement(sql)) {
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String nombreEquipo = rs.getString("equipo");
                int cantidad = rs.getInt("cantidad_mantenimientos");
                dataset.addValue(cantidad, "Cantidad de Mantenimientos", nombreEquipo);
            }

            JFreeChart barChart = ChartFactory.createBarChart(
                    "Cantidad de Mantenimientos por Equipo",
                    "Equipo",
                    "Cantidad",
                    dataset,
                    PlotOrientation.VERTICAL,
                    true, true, false);

            // Estilo oscuro
            barChart.setBackgroundPaint(new Color(102, 102, 102));
            barChart.getPlot().setBackgroundPaint(new Color(102, 102, 102));
            barChart.getCategoryPlot().setRangeGridlinePaint(Color.WHITE);
            barChart.getTitle().setPaint(Color.WHITE);

            if (barChart.getLegend() != null) {
                barChart.getLegend().setItemPaint(Color.BLACK);
            }

            CategoryPlot plot = barChart.getCategoryPlot();
            CategoryAxis domainAxis = plot.getDomainAxis();
            domainAxis.setTickLabelPaint(Color.WHITE);
            domainAxis.setLabelPaint(Color.WHITE);

            NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
            rangeAxis.setTickLabelPaint(Color.WHITE);
            rangeAxis.setLabelPaint(Color.WHITE);

            ChartPanel chartPanel = new ChartPanel(barChart);
            chartPanel.setPreferredSize(new Dimension(Graficoo.getWidth(), Graficoo.getHeight()));

            Graficoo.removeAll();
            Graficoo.setLayout(new BorderLayout());
            Graficoo.add(chartPanel, BorderLayout.CENTER);
            Graficoo.validate();

            logger.info("Gráfico generado y actualizado correctamente.");

        } catch (SQLException e) {
            logger.error( "Error al generar gráfico de mantenimientos por equipo", e);
            JOptionPane.showMessageDialog(this, "Error al generar gráfico: " + e.getMessage());
        }
    }

    public void graficoCantidadMantenimientosPorMes(String mesSeleccionado) {
        logger.info("Generando gráfico de mantenimientos para el mes: " + mesSeleccionado);

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        // Convertir nombre del mes a número
        Month month = null;
        for (Month m : Month.values()) {
            if (m.getDisplayName(TextStyle.FULL, new Locale("es", "BO")).equalsIgnoreCase(mesSeleccionado)) {
                month = m;
                break;
            }
        }

        if (month != null) {
            int numeroMes = month.getValue();

            String sql = "SELECT e.nombre AS equipo, COUNT(*) AS cantidad_mantenimientos "
                    + "FROM mantenimiento m "
                    + "JOIN equipos e ON m.id_equipo = e.id_equipo "
                    + "WHERE MONTH(m.fecha_mantenimiento) = ? "
                    + "GROUP BY e.nombre "
                    + "ORDER BY cantidad_mantenimientos DESC";

            try (PreparedStatement ps = cn.prepareStatement(sql)) {
                ps.setInt(1, numeroMes);
                ResultSet rs = ps.executeQuery();

                while (rs.next()) {
                    String nombreEquipo = rs.getString("equipo");
                    int cantidad = rs.getInt("cantidad_mantenimientos");
                    dataset.addValue(cantidad, "Cantidad de Mantenimientos", nombreEquipo);
                }

                JFreeChart barChart = ChartFactory.createBarChart(
                        "Cantidad de Mantenimientos por Equipo - " + mesSeleccionado,
                        "Equipo",
                        "Cantidad",
                        dataset,
                        PlotOrientation.VERTICAL,
                        true, true, false);

                // Estilo oscuro
                barChart.setBackgroundPaint(new Color(102, 102, 102));
                barChart.getPlot().setBackgroundPaint(new Color(102, 102, 102));
                barChart.getCategoryPlot().setRangeGridlinePaint(Color.WHITE);
                barChart.getTitle().setPaint(Color.WHITE);

                if (barChart.getLegend() != null) {
                    barChart.getLegend().setItemPaint(Color.BLACK);
                }

                CategoryPlot plot = barChart.getCategoryPlot();
                CategoryAxis domainAxis = plot.getDomainAxis();
                domainAxis.setTickLabelPaint(Color.WHITE);
                domainAxis.setLabelPaint(Color.WHITE);

                NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
                rangeAxis.setTickLabelPaint(Color.WHITE);
                rangeAxis.setLabelPaint(Color.WHITE);

                ChartPanel chartPanel = new ChartPanel(barChart);
                chartPanel.setPreferredSize(new Dimension(Graficoo.getWidth(), Graficoo.getHeight()));

                Graficoo.removeAll();
                Graficoo.setLayout(new BorderLayout());
                Graficoo.add(chartPanel, BorderLayout.CENTER);
                Graficoo.validate();

                logger.info("Gráfico generado correctamente para el mes: " + mesSeleccionado);

            } catch (SQLException e) {
                logger.error( "Error al generar gráfico para el mes: " + mesSeleccionado, e);
                JOptionPane.showMessageDialog(this, "Error al generar gráfico: " + e.getMessage());
            }
        } else {
            logger.warn("Mes seleccionado no válido: " + mesSeleccionado);
            JOptionPane.showMessageDialog(this, "Mes seleccionado no válido.");
        }
    }

}
