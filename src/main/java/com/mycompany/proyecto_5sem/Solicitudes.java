/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.proyecto_5sem;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Marvin Siles
 */
public class Solicitudes extends javax.swing.JPanel {

    /**
     * Creates new form Solicitudes
     */
    conexionMysql conecta = new conexionMysql();
    Connection cn = conecta.estableceConexion();
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(Solicitudes.class);

    public Solicitudes() {
        initComponents();
        logger.info("Inicializando la clase Solicitudes");
        mostrarPrestamosRetrasados();
        logger.info("Se llamó a mostrarPrestamosRetrasados()");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaActivos = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(75, 99, 130));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("PRESTAMOS VENCIDOS");

        tablaActivos.setBackground(new java.awt.Color(164, 181, 196));
        tablaActivos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaActivos);

        jButton1.setBackground(new java.awt.Color(166, 136, 104));
        jButton1.setText("Marcar como Retrasado");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 727, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(29, 29, 29))
            .addGroup(layout.createSequentialGroup()
                .addGap(331, 331, 331)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int filaSeleccionada = tablaActivos.getSelectedRow();
        if (filaSeleccionada >= 0) {
            String idPrestamo = (String) tablaActivos.getValueAt(filaSeleccionada, 0);
            logger.info("Fila seleccionada: " + filaSeleccionada + ", ID préstamo: " + idPrestamo);

            actualizarEstadoPrestamoARevision(idPrestamo);
            logger.info("Se llamó a actualizarEstadoPrestamoARevision con ID: " + idPrestamo);

            mostrarPrestamosRetrasados();
            logger.info("Se actualizó la lista de préstamos retrasados tras la modificación.");
        } else {
            logger.warn("No se seleccionó ninguna fila en la tablaActivos al intentar actualizar estado.");
            JOptionPane.showMessageDialog(Solicitudes.this, "Por favor, selecciona un préstamo de la tabla.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaActivos;
    // End of variables declaration//GEN-END:variables
public void mostrarPrestamosRetrasados() {
    DefaultTableModel modelo = new DefaultTableModel();
    modelo.addColumn("ID Préstamo");
    modelo.addColumn("Nombre de Usuario");
    modelo.addColumn("Apellido de Usuario");
    modelo.addColumn("Nombre de Equipo");
    modelo.addColumn("Fecha de Préstamo");
    modelo.addColumn("Fecha Devolución Esperada");
    modelo.addColumn("Fecha Devolución Real");
    modelo.addColumn("Días Retrasados");
    modelo.addColumn("Estado de Préstamo");

    tablaActivos.setModel(modelo);

    String consultaSQL = "SELECT "
            + "p.id_prestamo, "
            + "u.id_usuario, "
            + "u.nombre AS nombre_usuario, "
            + "u.apellido AS apellido_usuario, "
            + "e.nombre AS nombre_equipo, "
            + "p.fecha_prestamo, "
            + "p.fecha_devolucion_esperada, "
            + "p.fecha_devolucion_real, "
            + "DATEDIFF(NOW(), p.fecha_devolucion_esperada) AS dias_retrasados, "
            + "ep.nombre_estado AS estado_prestamo "
            + "FROM prestamos p "
            + "JOIN usuarios u ON p.id_usuario = u.id_usuario "
            + "JOIN equipos e ON p.id_equipo = e.id_equipo "
            + "JOIN estado_prestamo ep ON p.id_estado = ep.id_estado "
            + "WHERE p.fecha_devolucion_esperada < NOW() "
            + "AND ep.nombre_estado NOT IN ('devuelto', 'en revisión', 'en mantenimiento', 'devuelto con retraso', 'reserva vencida') "
            + "ORDER BY p.id_prestamo ASC";

    try (Statement st = cn.createStatement(); ResultSet rs = st.executeQuery(consultaSQL)) {
        logger.info("Ejecutando consulta para mostrar préstamos retrasados.");

        while (rs.next()) {
            int idUsuario = rs.getInt("id_usuario");
            String estadoPrestamo = rs.getString("estado_prestamo");
            int diasRetrasados = rs.getInt("dias_retrasados");
            Date fechaReal = rs.getDate("fecha_devolucion_real");

            // Llenar la tabla
            String[] data = new String[9];
            data[0] = rs.getString("id_prestamo");
            data[1] = rs.getString("nombre_usuario");
            data[2] = rs.getString("apellido_usuario");
            data[3] = rs.getString("nombre_equipo");
            data[4] = rs.getString("fecha_prestamo");
            data[5] = rs.getString("fecha_devolucion_esperada");
            data[6] = fechaReal != null ? fechaReal.toString() : "No devuelto";
            data[7] = String.valueOf(diasRetrasados);
            data[8] = estadoPrestamo;
            modelo.addRow(data);

            logger.debug("Agregado préstamo ID " + data[0] + " al modelo.");

            // ✅ SANCIONAR solo si NO devolvió (fecha_devolucion_real es NULL)
            if (fechaReal == null) {
                aplicarSancionIndefinida(idUsuario);
            }
        }

        tablaActivos.setModel(modelo);
        logger.info("Préstamos retrasados mostrados y sanciones aplicadas correctamente.");
    } catch (SQLException e) {
        logger.error("Error al mostrar los préstamos retrasados: " + e);
        JOptionPane.showMessageDialog(null, "Error al mostrar los préstamos retrasados.");
    }
}

private void aplicarSancionIndefinida(int idUsuario) {
    String sql = "UPDATE usuarios SET sancionado_hasta = '9999-12-31' WHERE id_usuario = ?";
    try (PreparedStatement ps = cn.prepareStatement(sql)) {
        ps.setInt(1, idUsuario);
        ps.executeUpdate();
        logger.warn("Usuario " + idUsuario + " sancionado indefinidamente por NO devolver el equipo.");
    } catch (SQLException e) {
        logger.error("Error al aplicar sanción indefinida al usuario " + idUsuario + ": " + e);
    }
}



    private void actualizarEstadoPrestamoARevision(String idPrestamo) {
        String consultaSQL = "UPDATE prestamos SET id_estado = 9 WHERE id_prestamo = ?";
        String obtenerDatosSQL = "SELECT id_usuario, fecha_devolucion_esperada, NOW() AS fecha_real FROM prestamos WHERE id_prestamo = ?";
        String actualizarSancionSQL = "UPDATE usuarios SET sancionado_hasta = ? WHERE id_usuario = ?";

        try (
                Connection cnx = conecta.estableceConexion(); PreparedStatement psActualizar = cnx.prepareStatement(consultaSQL); PreparedStatement psDatos = cnx.prepareStatement(obtenerDatosSQL)) {
            cnx.setAutoCommit(false);

            // Obtener datos del préstamo
            psDatos.setString(1, idPrestamo);
            ResultSet rs = psDatos.executeQuery();

            if (rs.next()) {
                int idUsuario = rs.getInt("id_usuario");
                Date fechaEsperada = rs.getDate("fecha_devolucion_esperada");
                Date fechaReal = rs.getDate("fecha_real");

                // Comparar fechas
                if (fechaReal.after(fechaEsperada)) {
                    long diasRetraso = ChronoUnit.DAYS.between(
                            fechaEsperada.toLocalDate(),
                            fechaReal.toLocalDate()
                    );

                    long diasSancion = diasRetraso + 7;
                    LocalDate nuevaFechaSancion = LocalDate.now().plusDays(diasSancion);

                    // Aplicar sanción
                    try (PreparedStatement psSancion = cnx.prepareStatement(actualizarSancionSQL)) {
                        psSancion.setDate(1, Date.valueOf(nuevaFechaSancion));
                        psSancion.setInt(2, idUsuario);
                        psSancion.executeUpdate();
                        logger.warn("Usuario " + idUsuario + " sancionado hasta " + nuevaFechaSancion + " por retraso de " + diasRetraso + " días.");
                    }
                }
            }

            // Actualizar estado del préstamo
            psActualizar.setString(1, idPrestamo);
            int filasAfectadas = psActualizar.executeUpdate();

            if (filasAfectadas > 0) {
                cnx.commit();
                logger.info("Préstamo con ID " + idPrestamo + " marcado para revisión.");
                JOptionPane.showMessageDialog(this, "El préstamo con ID " + idPrestamo + " ha sido marcado para revisión.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } else {
                cnx.rollback();
                logger.warn("No se pudo marcar el préstamo con ID " + idPrestamo + " para revisión.");
                JOptionPane.showMessageDialog(this, "No se pudo marcar el préstamo para revisión.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (SQLException e) {
            logger.error("Error al actualizar el estado del préstamo y aplicar sanción: " + e);
            JOptionPane.showMessageDialog(this, "Error al actualizar el estado del préstamo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

}
