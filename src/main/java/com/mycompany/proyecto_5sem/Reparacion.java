/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.proyecto_5sem;

import java.awt.Component;
import java.awt.GridLayout;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Marvin Siles
 */
public class Reparacion extends javax.swing.JPanel {

    /**
     * Creates new form Reparacion
     */
    conexionMysql conecta = new conexionMysql();
    Connection cn = conecta.estableceConexion();
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(Reparacion.class);

    public Reparacion() {
        initComponents();
        logger.info("Componente Reparacion inicializado.");

        try {
            mostrarPrestamosRevision();
            logger.info("Se llamó correctamente a mostrarPrestamosRevision().");
        } catch (Exception e) {
            logger.error( "Error al mostrar los préstamos en revisión", e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaRevision = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        costoTextField = new javax.swing.JTextPane();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        descripcionTextArea = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(75, 99, 130));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("REVISION DE EQUIPOS");

        tablaRevision.setBackground(new java.awt.Color(164, 181, 196));
        tablaRevision.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaRevision);

        jButton1.setBackground(new java.awt.Color(166, 136, 104));
        jButton1.setText("SIN OBSERVACIONES");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(166, 136, 104));
        jButton2.setText("CON OBSERVACIONES");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        costoTextField.setBackground(new java.awt.Color(164, 181, 196));
        jScrollPane2.setViewportView(costoTextField);

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("COSTO: ");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("DESCRIPCION: ");

        descripcionTextArea.setBackground(new java.awt.Color(164, 181, 196));
        descripcionTextArea.setColumns(20);
        descripcionTextArea.setRows(5);
        jScrollPane3.setViewportView(descripcionTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(86, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 685, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(204, 204, 204)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jButton1))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(22, 22, 22)
                                .addComponent(jButton2))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int filaSeleccionada = tablaRevision.getSelectedRow();
        if (filaSeleccionada >= 0) {
            String idPrestamo = (String) tablaRevision.getValueAt(filaSeleccionada, 0);
            logger.info("Préstamo seleccionado para devolución. ID: " + idPrestamo);

            try {
                marcarComoDevuelto(idPrestamo); // Llama al nuevo método
                logger.info("Préstamo marcado como devuelto. ID: " + idPrestamo);
                mostrarPrestamosRevision(); // Recarga la tabla para mostrar el cambio
                logger.info("Tabla de préstamos en revisión actualizada.");
            } catch (Exception e) {
                logger.error( "Error al marcar como devuelto el préstamo con ID: " + idPrestamo, e);
                JOptionPane.showMessageDialog(Reparacion.this, "Error al marcar el préstamo como devuelto.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            logger.warn("No se seleccionó ningún préstamo de la tabla.");
            JOptionPane.showMessageDialog(Reparacion.this, "Por favor, selecciona un préstamo de la tabla.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int filaSeleccionada = tablaRevision.getSelectedRow();
        if (filaSeleccionada >= 0) {
            String idPrestamo = (String) tablaRevision.getValueAt(filaSeleccionada, 0);
            logger.info("Préstamo seleccionado: ID = " + idPrestamo);

            String descripcion = descripcionTextArea.getText();
            String costoStr = costoTextField.getText();

            if (descripcion.isEmpty()) {
                logger.warn("Campo descripción vacío.");
                JOptionPane.showMessageDialog(Reparacion.this, "Por favor, ingrese la descripción del problema.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (costoStr.isEmpty()) {
                logger.warn("Campo costo vacío.");
                JOptionPane.showMessageDialog(Reparacion.this, "Por favor, ingrese el costo del mantenimiento.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }

            try {
                double costo = Double.parseDouble(costoStr);
                logger.info("Costo ingresado: " + costo);

                String idEquipoStr = obtenerIdEquipoDePrestamo(idPrestamo);
                if (idEquipoStr != null) {
                    int idEquipo = Integer.parseInt(idEquipoStr);
                    logger.info("ID del equipo obtenido: " + idEquipo);

                    marcarComoEnMantenimiento(idPrestamo, descripcion, costo, idEquipo);
                    logger.info("Préstamo marcado como 'en mantenimiento'. ID: " + idPrestamo);

                    mostrarPrestamosRevision();
                    logger.info("Tabla de préstamos en revisión actualizada.");
                } else {
                    logger.error("No se pudo obtener el ID del equipo para el préstamo ID: " + idPrestamo);
                    JOptionPane.showMessageDialog(Reparacion.this, "No se pudo obtener el ID del equipo.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException ex) {
                logger.error( "Error al convertir el costo a número. Entrada: " + costoStr, ex);
                JOptionPane.showMessageDialog(Reparacion.this, "El costo debe ser un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            logger.warn("No se seleccionó ningún préstamo de la tabla.");
            JOptionPane.showMessageDialog(Reparacion.this, "Por favor, selecciona un préstamo de la tabla.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane costoTextField;
    private javax.swing.JTextArea descripcionTextArea;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tablaRevision;
    // End of variables declaration//GEN-END:variables
private void mostrarPrestamosRevision() {
    DefaultTableModel modelo = new DefaultTableModel();
    modelo.addColumn("ID Préstamo");
    modelo.addColumn("Nombre de Usuario");
    modelo.addColumn("Apellido de Usuario");
    modelo.addColumn("Nombre de Equipo");
    modelo.addColumn("Fecha de Préstamo");
    modelo.addColumn("Fecha Devolución Esperada");
    modelo.addColumn("Estado");

    tablaRevision.setModel(modelo);

    String consultaSQL = "SELECT "
            + "p.id_prestamo, "
            + "u.nombre AS nombre_usuario, "
            + "u.apellido AS apellido_usuario, "
            + "e.nombre AS nombre_equipo, "
            + "p.fecha_prestamo, "
            + "p.fecha_devolucion_esperada, "
            + "ep.nombre_estado AS estado_prestamo "
            + "FROM prestamos p "
            + "JOIN usuarios u ON p.id_usuario = u.id_usuario "
            + "JOIN equipos e ON p.id_equipo = e.id_equipo "
            + "JOIN estado_prestamo ep ON p.id_estado = ep.id_estado "
            + "WHERE ep.nombre_estado IN ('en revisión', 'p_retrasado revision') "
            + "ORDER BY p.fecha_devolucion_esperada";

    try {
        Statement st = cn.createStatement();
        ResultSet rs = st.executeQuery(consultaSQL);
        while (rs.next()) {
            String[] data = new String[7];
            data[0] = rs.getString("id_prestamo");
            data[1] = rs.getString("nombre_usuario");
            data[2] = rs.getString("apellido_usuario");
            data[3] = rs.getString("nombre_equipo");
            data[4] = rs.getString("fecha_prestamo");
            data[5] = rs.getString("fecha_devolucion_esperada");
            data[6] = rs.getString("estado_prestamo");
            modelo.addRow(data);
        }
        logger.info("Préstamos en revisión mostrados correctamente.");
    } catch (SQLException e) {
        logger.error("Error al mostrar los préstamos en revisión", e);
        JOptionPane.showMessageDialog(null, "Error al mostrar los préstamos en revisión: " + e.getMessage());
    }
}


 public void marcarComoDevuelto(String idPrestamo) {
    String consultaEstado = "SELECT ep.nombre_estado, p.cantidad, p.id_equipo FROM prestamos p "
                          + "JOIN estado_prestamo ep ON p.id_estado = ep.id_estado "
                          + "WHERE p.id_prestamo = ?";

    String consultaSQLPrestamo = "UPDATE prestamos SET id_estado = ?, fecha_devolucion_real = ? WHERE id_prestamo = ?";
    String consultaSQLEquipo = "UPDATE equipos SET stock = stock + ? WHERE id_equipo = ?";

    try (
        PreparedStatement pstmtEstado = cn.prepareStatement(consultaEstado);
        PreparedStatement pstmtPrestamo = cn.prepareStatement(consultaSQLPrestamo);
        PreparedStatement pstmtEquipo = cn.prepareStatement(consultaSQLEquipo)
    ) {
        // Paso 1: Consultar estado actual, cantidad y equipo del préstamo
        pstmtEstado.setString(1, idPrestamo);
        ResultSet rs = pstmtEstado.executeQuery();

        if (!rs.next()) {
            JOptionPane.showMessageDialog(null, "No se encontró el préstamo con ID: " + idPrestamo, "Error", JOptionPane.ERROR_MESSAGE);
            logger.warn("No se encontró el préstamo con ID: " + idPrestamo);
            return;
        }

        String estadoActual = rs.getString("nombre_estado");
        int cantidad = rs.getInt("cantidad");
        int idEquipo = rs.getInt("id_equipo");
        int nuevoEstado;

        // Paso 2: Determinar nuevo estado
        if ("en revisión".equalsIgnoreCase(estadoActual)) {
            nuevoEstado = 2; // devuelto
        } else if ("p_retrasado revision".equalsIgnoreCase(estadoActual)) {
            nuevoEstado = 6; // devuelto con retraso
        } else {
            JOptionPane.showMessageDialog(null, "El préstamo no está en estado válido para devolución: " + estadoActual, "Advertencia", JOptionPane.WARNING_MESSAGE);
            logger.warn("Estado no válido para marcar como devuelto. ID: " + idPrestamo + ", Estado: " + estadoActual);
            return;
        }

        // Paso 3: Actualizar préstamo
        Date fechaHoy = new Date(System.currentTimeMillis());
        pstmtPrestamo.setInt(1, nuevoEstado);
        pstmtPrestamo.setDate(2, fechaHoy);
        pstmtPrestamo.setString(3, idPrestamo);
        int filasAfectadasPrestamo = pstmtPrestamo.executeUpdate();

        // Paso 4: Actualizar stock del equipo con la cantidad original prestada
        pstmtEquipo.setInt(1, cantidad);
        pstmtEquipo.setInt(2, idEquipo);
        int filasAfectadasEquipo = pstmtEquipo.executeUpdate();

        // Mensaje al usuario
        if (filasAfectadasPrestamo > 0 && filasAfectadasEquipo > 0) {
            JOptionPane.showMessageDialog(null, "El préstamo con ID " + idPrestamo + " ha sido marcado como devuelto y el stock del equipo ha sido actualizado.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            logger.info("Préstamo devuelto y stock actualizado. ID: " + idPrestamo);
        } else if (filasAfectadasPrestamo > 0) {
            JOptionPane.showMessageDialog(null, "El préstamo ha sido devuelto, pero no se pudo actualizar el stock.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            logger.warn("Stock no actualizado. ID: " + idPrestamo);
        } else {
            JOptionPane.showMessageDialog(null, "No se pudo marcar el préstamo como devuelto.", "Error", JOptionPane.ERROR_MESSAGE);
            logger.warn("Fallo al actualizar préstamo. ID: " + idPrestamo);
        }

    } catch (SQLException e) {
        logger.error("Error al procesar devolución. ID: " + idPrestamo, e);
        JOptionPane.showMessageDialog(null, "Error al marcar como devuelto: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}


    private void marcarComoEnMantenimiento(String idPrestamo, String descripcion, double costo, int idEquipo) {
        // 1. Obtener el ID del estado "en mantenimiento"
        int idEstadoMantenimiento = obtenerIdEstado("en mantenimiento");
        if (idEstadoMantenimiento == -1) {
            JOptionPane.showMessageDialog(this, "No se encontró el estado 'en mantenimiento' en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
            logger.error("No se encontró el estado 'en mantenimiento' en la base de datos.");
            return;
        }

        String consultaSQLPrestamo = "UPDATE prestamos SET id_estado = ?, fecha_devolucion_real = ? WHERE id_prestamo = ?";
        String consultaSQLMantenimiento = "INSERT INTO mantenimiento (id_equipo, fecha_mantenimiento, descripcion, costo) VALUES (?, ?, ?, ?)";
        String consultaSQLEquipo = "UPDATE equipos SET estado = 'En Mantenimiento' WHERE id_equipo = ?";

        try (PreparedStatement pstmtPrestamo = cn.prepareStatement(consultaSQLPrestamo); PreparedStatement pstmtMantenimiento = cn.prepareStatement(consultaSQLMantenimiento); PreparedStatement pstmtEquipo = cn.prepareStatement(consultaSQLEquipo)) {

            Timestamp fechaHoy = new Timestamp(System.currentTimeMillis());

            pstmtPrestamo.setInt(1, idEstadoMantenimiento);
            pstmtPrestamo.setTimestamp(2, fechaHoy);
            pstmtPrestamo.setString(3, idPrestamo);
            int filasAfectadasPrestamo = pstmtPrestamo.executeUpdate();

            pstmtMantenimiento.setInt(1, idEquipo);
            pstmtMantenimiento.setTimestamp(2, fechaHoy);
            pstmtMantenimiento.setString(3, descripcion);
            pstmtMantenimiento.setDouble(4, costo);
            int filasAfectadasMantenimiento = pstmtMantenimiento.executeUpdate();

            pstmtEquipo.setInt(1, idEquipo);
            int filasAfectadasEquipo = pstmtEquipo.executeUpdate();

            if (filasAfectadasPrestamo > 0 && filasAfectadasMantenimiento > 0 && filasAfectadasEquipo > 0) {
                JOptionPane.showMessageDialog(this, "El préstamo con ID " + idPrestamo + " ha sido marcado para mantenimiento y se ha registrado el mantenimiento.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                logger.info("Préstamo ID " + idPrestamo + " marcado como en mantenimiento; mantenimiento registrado y equipo actualizado.");
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo marcar el préstamo para mantenimiento o registrar el mantenimiento.", "Error", JOptionPane.ERROR_MESSAGE);
                logger.warn("Fallo al marcar el préstamo ID " + idPrestamo + " para mantenimiento o registrar mantenimiento.");
            }

        } catch (SQLException e) {
            logger.error( "Error al marcar el préstamo para mantenimiento o registrar mantenimiento", e);
            JOptionPane.showMessageDialog(this, "Error al marcar el préstamo para mantenimiento o registrar el mantenimiento: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private int obtenerIdEstado(String nombreEstado) {
        int idEstado = -1;
        String sql = "SELECT id_estado FROM estado_prestamo WHERE nombre_estado = ?";
        try (PreparedStatement pstmt = cn.prepareStatement(sql)) {
            pstmt.setString(1, nombreEstado);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                idEstado = rs.getInt("id_estado");
                logger.info("ID estado obtenido para '" + nombreEstado + "': " + idEstado);
            }
            rs.close();
        } catch (SQLException e) {
            logger.error( "Error al obtener el ID del estado: " + nombreEstado, e);
        }
        return idEstado;
    }

    private String obtenerIdEquipoDePrestamo(String idPrestamo) {
        String idEquipo = null;
        String sql = "SELECT id_equipo FROM prestamos WHERE id_prestamo = ?";
        try (PreparedStatement pstmt = cn.prepareStatement(sql)) {
            pstmt.setString(1, idPrestamo);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                idEquipo = rs.getString("id_equipo");
                logger.info("ID equipo obtenido para préstamo ID " + idPrestamo + ": " + idEquipo);
            }
            rs.close();
        } catch (SQLException ex) {
            logger.error("Error al obtener el ID del equipo para préstamo ID " + idPrestamo, ex);
        }
        return idEquipo;
    }

}
