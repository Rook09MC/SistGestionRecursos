/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.proyecto_5sem;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.Month;
import java.time.format.TextStyle;
import java.util.Locale;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Marvin Siles
 */
public class ReportesUsuario extends javax.swing.JPanel {

    /**
     * Creates new form ReportesUsuario
     */
    conexionMysql conecta = new conexionMysql();
    Connection cn = conecta.estableceConexion();
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(ReportesUsuario.class);

    public ReportesUsuario() {
        initComponents();
        mostrarUsuariosConRol();
        cargarMesesComboBox();
        logger.info("Interfaz ReportesUsuario inicializada correctamente");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TBLreporteusuario = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        txtIdUsuario = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        graficoo = new javax.swing.JPanel();
        mesComboBox = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(75, 99, 130));
        setPreferredSize(new java.awt.Dimension(950, 415));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("<html>REPORTES<br>USUARIOS </html>");

        TBLreporteusuario.setBackground(new java.awt.Color(164, 181, 196));
        TBLreporteusuario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TBLreporteusuario);

        jButton1.setBackground(new java.awt.Color(166, 136, 104));
        jButton1.setText("mostrar por filtro");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtIdUsuario.setBackground(new java.awt.Color(164, 181, 196));

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Filtrar por Mes:");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("BUSCAR POR ID");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("FILTROS:");

        jButton2.setBackground(new java.awt.Color(166, 136, 104));
        jButton2.setText("Generar Grafico");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(166, 136, 104));
        jButton3.setText("Exportar a PDF");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        graficoo.setBackground(new java.awt.Color(102, 102, 102));
        graficoo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Grafico:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        graficoo.setForeground(new java.awt.Color(255, 255, 255));
        graficoo.setMaximumSize(new java.awt.Dimension(702, 246));
        graficoo.setMinimumSize(new java.awt.Dimension(700, 250));

        javax.swing.GroupLayout graficooLayout = new javax.swing.GroupLayout(graficoo);
        graficoo.setLayout(graficooLayout);
        graficooLayout.setHorizontalGroup(
            graficooLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        graficooLayout.setVerticalGroup(
            graficooLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        mesComboBox.setBackground(new java.awt.Color(164, 181, 196));
        mesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(mesComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtIdUsuario, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 702, Short.MAX_VALUE)
                    .addComponent(graficoo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(graficoo, javax.swing.GroupLayout.PREFERRED_SIZE, 246, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtIdUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addGap(11, 11, 11)))
                .addGap(14, 14, 14))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        filtrarUsuarios();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        mostrarGrafico();

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String mesSeleccionado = (String) mesComboBox.getSelectedItem();
        float margen = 72f;

        Document document = new Document(PageSize.A4.rotate(), margen, margen, margen, margen);
        try {
            logger.info("Iniciando generación del reporte PDF de usuarios para el mes: " + mesSeleccionado);

            String directorio = "C:\\Users\\Marvin Siles\\Documents\\REPORTES PROYECTO\\";
            String nombreBase = "reporte_Usuarios";
            String extension = ".pdf";
            int contador = 1;
            File archivo;

            do {
                archivo = new File(directorio + nombreBase + "_" + contador + extension);
                contador++;
            } while (archivo.exists());

            String ruta = archivo.getAbsolutePath();

            PdfWriter.getInstance(document, new FileOutputStream(ruta));
            document.open();

            // Fuentes
            Font fontTitulo = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
            Font fontTexto = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
            Font fontEncabezado = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

            // Título
            Paragraph titulo = new Paragraph("Reporte de Usuarios Registrados - " + mesSeleccionado, fontTitulo);
            titulo.setAlignment(Element.ALIGN_CENTER);
            document.add(titulo);
            document.add(Chunk.NEWLINE);

            // Introducción
            Paragraph introduccion = new Paragraph(
                    "Este reporte muestra los usuarios registrados en el sistema durante el mes seleccionado, "
                    + "con detalles sobre su información personal y rol asignado.",
                    fontTexto);
            introduccion.setAlignment(Element.ALIGN_JUSTIFIED);
            introduccion.setSpacingAfter(20);
            document.add(introduccion);

            // Tabla
            PdfPTable tablaPDF = new PdfPTable(TBLreporteusuario.getColumnCount());
            tablaPDF.setWidthPercentage(100);
            tablaPDF.setSpacingBefore(10f);
            tablaPDF.setSpacingAfter(10f);

            for (int i = 0; i < TBLreporteusuario.getColumnCount(); i++) {
                PdfPCell celda = new PdfPCell(new Phrase(TBLreporteusuario.getColumnName(i), fontEncabezado));
                celda.setBackgroundColor(BaseColor.LIGHT_GRAY);
                celda.setHorizontalAlignment(Element.ALIGN_CENTER);
                tablaPDF.addCell(celda);
            }

            for (int filas = 0; filas < TBLreporteusuario.getRowCount(); filas++) {
                for (int cols = 0; cols < TBLreporteusuario.getColumnCount(); cols++) {
                    Object valor = TBLreporteusuario.getValueAt(filas, cols);
                    PdfPCell celda = new PdfPCell(new Phrase(valor == null ? "" : valor.toString(), fontTexto));
                    celda.setHorizontalAlignment(Element.ALIGN_CENTER);
                    tablaPDF.addCell(celda);
                }
            }

            document.add(tablaPDF);

            // Imagen del gráfico
            BufferedImage imagenGrafico = new BufferedImage(graficoo.getWidth(), graficoo.getHeight(), BufferedImage.TYPE_INT_RGB);
            graficoo.paint(imagenGrafico.getGraphics());

            com.itextpdf.text.Image imagenPDF = com.itextpdf.text.Image.getInstance(imagenGrafico, null);
            imagenPDF.setAlignment(Element.ALIGN_CENTER);
            document.add(imagenPDF);

            JOptionPane.showMessageDialog(this, "PDF generado con éxito en:\n" + ruta);
            logger.info("PDF generado exitosamente en: " + ruta);

        } catch (DocumentException | IOException e) {
            JOptionPane.showMessageDialog(this, "Error al generar PDF: " + e.getMessage());
            logger.info( "Error al generar PDF de usuarios", e);
            e.printStackTrace();
        } finally {
            document.close();
            logger.info("Documento PDF cerrado correctamente.");
        }

    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TBLreporteusuario;
    private javax.swing.JPanel graficoo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> mesComboBox;
    private javax.swing.JTextField txtIdUsuario;
    // End of variables declaration//GEN-END:variables
public void mostrarUsuariosConRol() {
        logger.info("Iniciando carga de usuarios con su rol...");

        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Usuario");
        modelo.addColumn("Nombre");
        modelo.addColumn("Apellido");
        modelo.addColumn("Correo");
        modelo.addColumn("Rol");

        TBLreporteusuario.setModel(modelo);

        String consulta = "SELECT u.id_usuario, u.nombre, u.apellido, u.correo, r.nombre_rol "
                + "FROM Usuarios u "
                + "JOIN Roles r ON u.id_rol = r.id_rol "
                + "ORDER BY u.id_usuario ASC";

        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(consulta);
            int contador = 0;
            while (rs.next()) {
                String[] datos = new String[5];
                datos[0] = rs.getString("id_usuario");
                datos[1] = rs.getString("nombre");
                datos[2] = rs.getString("apellido");
                datos[3] = rs.getString("correo");
                datos[4] = rs.getString("nombre_rol");
                modelo.addRow(datos);
                contador++;
            }
            logger.info("Usuarios cargados correctamente: " + contador + " registros encontrados.");
        } catch (SQLException e) {
            logger.error( "Error al mostrar los usuarios con rol", e);
        }
    }

    public void mostrarUsuariosConRolPorMes() {
        int mesSeleccionado = mesComboBox.getSelectedIndex() + 1;
        logger.info("Iniciando carga de usuarios por mes. Mes seleccionado (1-12): " + mesSeleccionado);

        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Usuario");
        modelo.addColumn("Nombre");
        modelo.addColumn("Apellido");
        modelo.addColumn("Correo");
        modelo.addColumn("Rol");
        modelo.addColumn("Fecha Registro");

        TBLreporteusuario.setModel(modelo);

        String consulta = "SELECT u.id_usuario, u.nombre, u.apellido, u.correo, r.nombre_rol, u.fecha_registro "
                + "FROM Usuarios u "
                + "JOIN Roles r ON u.id_rol = r.id_rol "
                + "WHERE MONTH(u.fecha_registro) = ? "
                + "ORDER BY u.id_usuario ASC";

        try {
            PreparedStatement ps = cn.prepareStatement(consulta);
            ps.setInt(1, mesSeleccionado);

            ResultSet rs = ps.executeQuery();
            int contador = 0;

            while (rs.next()) {
                String[] datos = new String[6];
                datos[0] = rs.getString("id_usuario");
                datos[1] = rs.getString("nombre");
                datos[2] = rs.getString("apellido");
                datos[3] = rs.getString("correo");
                datos[4] = rs.getString("nombre_rol");
                datos[5] = rs.getString("fecha_registro");

                modelo.addRow(datos);
                contador++;
            }

            logger.info("Usuarios filtrados por mes cargados correctamente: " + contador + " registros encontrados.");
        } catch (SQLException e) {
            logger.error( "Error al mostrar usuarios filtrados por mes", e);
        }
    }

    private void buscarUsuarioPorId() {
        String idTexto = txtIdUsuario.getText();

        if (idTexto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese un ID de usuario.");
            logger.warn("Intento de búsqueda sin ingresar ID.");
            return;
        }

        try {
            int id = Integer.parseInt(idTexto);
            logger.info("Buscando usuario con ID: " + id);

            DefaultTableModel modelo = new DefaultTableModel();
            modelo.addColumn("ID Usuario");
            modelo.addColumn("Nombre");
            modelo.addColumn("Apellido");
            modelo.addColumn("Correo");
            modelo.addColumn("Rol");

            String sql = "SELECT u.id_usuario, u.nombre, u.apellido, u.correo, r.nombre_rol "
                    + "FROM Usuarios u JOIN Roles r ON u.id_rol = r.id_rol "
                    + "WHERE u.id_usuario = ?";

            PreparedStatement pst = cn.prepareStatement(sql);
            pst.setInt(1, id);
            ResultSet rs = pst.executeQuery();

            String[] datos = new String[5];
            if (rs.next()) {
                datos[0] = rs.getString("id_usuario");
                datos[1] = rs.getString("nombre");
                datos[2] = rs.getString("apellido");
                datos[3] = rs.getString("correo");
                datos[4] = rs.getString("nombre_rol");
                modelo.addRow(datos);
                logger.info("Usuario encontrado y mostrado.");
            } else {
                JOptionPane.showMessageDialog(this, "No se encontró ningún usuario con ese ID.");
                logger.info("No se encontró usuario con ID: " + id);
            }

            TBLreporteusuario.setModel(modelo);

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El ID debe ser un número.");
            logger.warn("Error de formato al ingresar ID: " + e.getMessage());
        } catch (SQLException e) {
            logger.error( "Error al buscar usuario por ID", e);
        }
    }

    private void cargarMesesComboBox() {
        mesComboBox.addItem("Todos los meses");
        for (Month month : Month.values()) {
            mesComboBox.addItem(month.getDisplayName(TextStyle.FULL, new Locale("es", "BO")));
        }
        logger.info("Meses cargados en el ComboBox.");
    }

    public void mostrarGrafico() {
        logger.info("Iniciando generación de gráfico de usuarios por rol...");

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        String sql = "SELECT r.nombre_rol AS rol, COUNT(u.id_usuario) AS cantidad "
                + "FROM Roles r "
                + "LEFT JOIN Usuarios u ON r.id_rol = u.id_rol "
                + "GROUP BY r.nombre_rol "
                + "ORDER BY cantidad DESC";

        try (PreparedStatement ps = cn.prepareStatement(sql)) {
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String rol = rs.getString("rol");
                int cantidad = rs.getInt("cantidad");
                dataset.addValue(cantidad, "Cantidad de Usuarios", rol);
                logger.debug("Rol: " + rol + ", Cantidad: " + cantidad);
            }

            JFreeChart barChart = ChartFactory.createBarChart(
                    "Usuarios Registrados por Rol",
                    "Rol",
                    "Cantidad",
                    dataset,
                    PlotOrientation.VERTICAL,
                    true, true, false);

            barChart.setBackgroundPaint(new Color(102, 102, 102));
            barChart.getPlot().setBackgroundPaint(new Color(102, 102, 102));
            barChart.getCategoryPlot().setRangeGridlinePaint(Color.WHITE);
            barChart.getTitle().setPaint(Color.WHITE);

            if (barChart.getLegend() != null) {
                barChart.getLegend().setItemPaint(Color.BLACK);
            }

            CategoryPlot plot = barChart.getCategoryPlot();
            plot.getDomainAxis().setTickLabelPaint(Color.WHITE);
            plot.getDomainAxis().setLabelPaint(Color.WHITE);

            NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
            rangeAxis.setTickLabelPaint(Color.WHITE);
            rangeAxis.setLabelPaint(Color.WHITE);

            ChartPanel chartPanel = new ChartPanel(barChart);
            Dimension size = graficoo.getSize();
            chartPanel.setPreferredSize(size);

            graficoo.removeAll();
            graficoo.setLayout(new BorderLayout());
            graficoo.add(chartPanel, BorderLayout.CENTER);
            graficoo.revalidate();
            graficoo.repaint();

            logger.info("Gráfico generado y mostrado correctamente.");

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al generar gráfico: " + e.getMessage());
            logger.error( "Error al generar gráfico de usuarios por rol", e);
        }
    }

    public void mostrarGraficoPorRolPorMes() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        int mesSeleccionado = mesComboBox.getSelectedIndex() + 1;

        String sql = "SELECT r.nombre_rol AS rol, COUNT(u.id_usuario) AS cantidad "
                + "FROM Roles r "
                + "LEFT JOIN Usuarios u ON r.id_rol = u.id_rol "
                + "WHERE MONTH(u.fecha_registro) = ? "
                + "GROUP BY r.nombre_rol "
                + "ORDER BY cantidad DESC";

        try (PreparedStatement ps = cn.prepareStatement(sql)) {
            ps.setInt(1, mesSeleccionado);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String rol = rs.getString("rol");
                int cantidad = rs.getInt("cantidad");
                dataset.addValue(cantidad, "Cantidad de Usuarios", rol);
            }

            logger.info("Gráfico generado para el mes: " + mesSeleccionado);

            JFreeChart barChart = ChartFactory.createBarChart(
                    "Usuarios Registrados por Rol en el Mes " + mesSeleccionado,
                    "Rol",
                    "Cantidad",
                    dataset,
                    PlotOrientation.VERTICAL,
                    true, true, false);

            barChart.setBackgroundPaint(new Color(102, 102, 102));
            barChart.getPlot().setBackgroundPaint(new Color(102, 102, 102));
            barChart.getCategoryPlot().setRangeGridlinePaint(Color.WHITE);
            barChart.getTitle().setPaint(Color.WHITE);

            if (barChart.getLegend() != null) {
                barChart.getLegend().setItemPaint(Color.BLACK);
            }

            CategoryPlot plot = barChart.getCategoryPlot();
            CategoryAxis domainAxis = plot.getDomainAxis();
            domainAxis.setTickLabelPaint(Color.WHITE);
            domainAxis.setLabelPaint(Color.WHITE);
            NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
            rangeAxis.setTickLabelPaint(Color.WHITE);
            rangeAxis.setLabelPaint(Color.WHITE);

            ChartPanel chartPanel = new ChartPanel(barChart);
            Dimension size = graficoo.getSize();
            chartPanel.setPreferredSize(size);
            chartPanel.setMaximumSize(size);
            chartPanel.setMinimumSize(size);

            graficoo.removeAll();
            graficoo.setLayout(new BorderLayout());
            graficoo.add(chartPanel, BorderLayout.CENTER);
            graficoo.revalidate();
            graficoo.repaint();

        } catch (SQLException e) {
            logger.error("Error al generar gráfico por rol y mes: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Error al generar gráfico: " + e.getMessage());
        }
    }

    public void filtrarUsuarios() {
        String idTexto = txtIdUsuario.getText();
        String mesSeleccionado = (String) mesComboBox.getSelectedItem();

        if (!idTexto.isEmpty()) {
            try {
                int id = Integer.parseInt(idTexto);
                logger.info("Buscando usuario por ID: " + id);
                buscarUsuarioPorId();
                txtIdUsuario.setText("");
            } catch (NumberFormatException e) {
                logger.warn("ID ingresado no es un número válido: " + idTexto);
                JOptionPane.showMessageDialog(this, "El ID debe ser un número válido.");
            }
        } else {
            if ("Todos los meses".equalsIgnoreCase(mesSeleccionado)) {
                logger.info("Mostrando todos los usuarios sin filtro de mes.");
                mostrarUsuariosConRol();
                mostrarGrafico();
            } else {
                logger.info("Aplicando filtro por mes: " + mesSeleccionado);
                mostrarUsuariosConRolPorMes();
                mostrarGraficoPorRolPorMes();
            }
        }
    }

}
