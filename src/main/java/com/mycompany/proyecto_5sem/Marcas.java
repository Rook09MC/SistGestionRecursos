/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.proyecto_5sem;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Marvin Siles
 */
public class Marcas extends javax.swing.JPanel {

    /**
     * Creates new form Marcas
     */
    conexionMysql conecta = new conexionMysql();
    Connection cn = conecta.estableceConexion();
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(Marcas.class);

    public Marcas() {
        initComponents();
        logger.info("Inicializando componentes en Marcas");
        mostrarMarcas();
        logger.info("Se ha ejecutado mostrarMarcas()");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtMarca = new javax.swing.JTextField();
        txtId = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaMarcas = new javax.swing.JTable();
        btnActualizar = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(75, 99, 130));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("MARCAS");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Marca:");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Id:");

        txtMarca.setBackground(new java.awt.Color(164, 181, 196));

        txtId.setBackground(new java.awt.Color(164, 181, 196));
        txtId.setEnabled(false);

        tablaMarcas.setBackground(new java.awt.Color(164, 181, 196));
        tablaMarcas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        tablaMarcas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMarcasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaMarcas);

        btnActualizar.setBackground(new java.awt.Color(166, 136, 104));
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnAgregar.setBackground(new java.awt.Color(166, 136, 104));
        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(166, 136, 104));
        jButton3.setText("Eliminar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(585, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(289, 289, 289))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(btnAgregar))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(jButton3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnActualizar)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(47, 47, 47)
                                .addComponent(txtMarca, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(97, 97, 97))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(87, 87, 87)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnActualizar)
                            .addComponent(btnAgregar))
                        .addGap(63, 63, 63)
                        .addComponent(jButton3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (JOptionPane.showConfirmDialog(null, "¿ESTÁ SEGURO DE ELIMINAR LA MARCA?", "CONFIRMAR", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            try {
                int idMarca = Integer.parseInt(txtId.getText());
                String sql = "DELETE FROM Marcas WHERE id_marca = ?";
                PreparedStatement ps = cn.prepareStatement(sql);
                ps.setInt(1, idMarca);

                logger.info("Intentando eliminar marca con ID: " + idMarca);

                int indice = ps.executeUpdate();

                if (indice > 0) {
                    logger.info("Marca eliminada correctamente, ID: " + idMarca);
                    mostrarMarcas();    // Actualiza la tabla de marcas
                    limpiarEntradas();  // Limpia los campos de texto
                    JOptionPane.showMessageDialog(null, "MARCA ELIMINADA CORRECTAMENTE");
                } else {
                    logger.warn("No se encontró la marca para eliminar con ID: " + idMarca);
                    JOptionPane.showMessageDialog(null, "NO SELECCIONÓ NINGUNA MARCA PARA ELIMINAR");
                }

            } catch (SQLException e) {
                logger.error("Error SQL al eliminar marca: " + e.getMessage());
                JOptionPane.showMessageDialog(null, "ERROR AL ELIMINAR LA MARCA: " + e.getMessage());
            } catch (NumberFormatException e) {
                logger.warn("ID de marca no válido: " + txtId.getText());
                JOptionPane.showMessageDialog(null, "ID DE MARCA NO VÁLIDO");
            }
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void tablaMarcasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMarcasMouseClicked
        btnAgregar.setEnabled(false);
        btnActualizar.setEnabled(true);

        int fila = this.tablaMarcas.getSelectedRow();

        if (fila >= 0) {
            String idSeleccionado = this.tablaMarcas.getValueAt(fila, 0).toString();
            String marcaSeleccionada = this.tablaMarcas.getValueAt(fila, 1).toString();

            this.txtId.setText(idSeleccionado);
            this.txtMarca.setText(marcaSeleccionada);

            logger.info("Fila seleccionada: " + fila + ", ID: " + idSeleccionado + ", Marca: " + marcaSeleccionada);
        } else {
            logger.warn("No se seleccionó ninguna fila en la tabla de marcas.");
        }
    }//GEN-LAST:event_tablaMarcasMouseClicked

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        String nombreMarca = txtMarca.getText().trim();

        if (nombreMarca.isEmpty()) {
            JOptionPane.showMessageDialog(null, "COMPLETA EL CAMPO NOMBRE DE MARCA...");
            logger.warn("Intento de guardar marca con campo vacío.");
        } else {
            try {
                // Verificar si ya existe una marca con el mismo nombre (sin importar mayúsculas/minúsculas)
                String sqlVerificar = "SELECT COUNT(*) FROM Marcas WHERE LOWER(nombre_marca) = LOWER(?)";
                PreparedStatement psVerificar = cn.prepareStatement(sqlVerificar);
                psVerificar.setString(1, nombreMarca);
                ResultSet rs = psVerificar.executeQuery();

                rs.next();
                int count = rs.getInt(1);

                if (count > 0) {
                    JOptionPane.showMessageDialog(null, "YA EXISTE UNA MARCA CON ESE NOMBRE.");
                    logger.info("Intento de insertar marca repetida: " + nombreMarca);
                    return;
                }

                // Insertar nueva marca
                String sqlInsert = "INSERT INTO Marcas (nombre_marca) VALUES (?)";
                PreparedStatement psInsert = cn.prepareStatement(sqlInsert);
                psInsert.setString(1, nombreMarca);

                int filas = psInsert.executeUpdate();
                if (filas > 0) {
                    JOptionPane.showMessageDialog(null, "MARCA REGISTRADA CORRECTAMENTE");
                    logger.info("Marca registrada correctamente: " + nombreMarca);
                } else {
                    logger.warn("No se pudo insertar la marca: " + nombreMarca);
                }

                mostrarMarcas();       // Actualiza la tabla
                limpiarEntradas();     // Limpia los campos

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "ERROR AL GUARDAR LA MARCA: " + e.getMessage());
                logger.error("Error al guardar la marca: " + nombreMarca, e);
            }
        }

    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        try {
            // Obtener datos desde los campos de texto
            String nuevoNombreMarca = txtMarca.getText().trim();
            int idMarca = Integer.parseInt(txtId.getText().trim());

            if (nuevoNombreMarca.isEmpty()) {
                JOptionPane.showMessageDialog(null, "El nombre de la marca no puede estar vacío.");
                logger.warn("Intento de actualizar marca con nombre vacío. ID: " + idMarca);
                return;
            }

            // Actualizar la marca en la base de datos
            String sql = "UPDATE Marcas SET nombre_marca = ? WHERE id_marca = ?";
            PreparedStatement ps = cn.prepareStatement(sql);

            ps.setString(1, nuevoNombreMarca);
            ps.setInt(2, idMarca);

            int resultado = ps.executeUpdate();

            if (resultado > 0) {
                JOptionPane.showMessageDialog(null, "Marca actualizada correctamente.");
                logger.info("Marca actualizada correctamente. ID: " + idMarca + ", Nuevo nombre: " + nuevoNombreMarca);
                mostrarMarcas();       // Refresca la tabla o listado de marcas
                limpiarEntradas();     // Limpia los campos del formulario
            } else {
                JOptionPane.showMessageDialog(null, "No se encontró la marca con ese ID.");
                logger.warn("No se encontró marca con ID: " + idMarca + " para actualizar.");
            }

        } catch (SQLException e) {
            logger.error("Error SQL al actualizar marca con ID: " + txtId.getText(), e);
            System.out.println("ERROR AL ACTUALIZAR MARCA: " + e);
        } catch (NumberFormatException e) {
            logger.warn( "ID inválido para actualización de marca: " + txtId.getText(), e);
            System.out.println("ERROR: ID inválido (no es un número): " + e);
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        btnAgregar.setEnabled(true);
        limpiarEntradas();
    }//GEN-LAST:event_jPanel1MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaMarcas;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtMarca;
    // End of variables declaration//GEN-END:variables
    private void mostrarMarcas() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("Nombre de Marca");

        tablaMarcas.setModel(modelo); // Asegúrate de que esta sea tu JTable para mostrar marcas

        String consultaSQL = "SELECT id_marca, nombre_marca FROM Marcas ORDER BY id_marca";

        String data[] = new String[2];

        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(consultaSQL);
            while (rs.next()) {
                data[0] = rs.getString("id_marca");
                data[1] = rs.getString("nombre_marca");
                modelo.addRow(data);
            }
            logger.info("Se mostraron las marcas correctamente.");
        } catch (SQLException e) {
            logger.error( "Error al mostrar marcas: ", e);
            System.out.println("Error al mostrar marcas: " + e);
        }
    }

    private void limpiarEntradas() {
        txtId.setText("");
        txtMarca.setText("");
        logger.info("Se limpiaron los campos de entrada (ID y Marca).");
    }

}
