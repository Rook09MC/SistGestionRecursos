/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.proyecto_5sem;

import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Marvin Siles
 */
public class PrestamosActivos extends javax.swing.JPanel {

    /**
     * Creates new form PrestamosActivos
     */
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(PrestamosActivos.class);
    conexionMysql conecta = new conexionMysql();
    Connection cn = conecta.estableceConexion();

    public PrestamosActivos() {
        try {
            logger.info("Inicializando PrestamosActivos...");

            initComponents();
            logger.info("Componentes inicializados.");

            mostrarPrestamosActivos();
            logger.info("Datos de préstamos activos mostrados.");

            actualizarPrestamosRetrasados();
            logger.info("Préstamos retrasados actualizados.");

        } catch (Exception e) {
            logger.error( "Error al inicializar PrestamosActivos", e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaActivos = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(75, 99, 130));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("PRESTAMOS ACTIVOS");

        tablaActivos.setBackground(new java.awt.Color(164, 181, 196));
        tablaActivos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaActivos);

        jButton1.setBackground(new java.awt.Color(166, 136, 104));
        jButton1.setText("Confirmar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("marcar el equipo como devuelto");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 692, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(99, 99, 99))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(57, 57, 57))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(338, 338, 338))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addContainerGap(64, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        int filaSeleccionada = tablaActivos.getSelectedRow();
        if (filaSeleccionada >= 0) {
            try {
                String idPrestamo = (String) tablaActivos.getValueAt(filaSeleccionada, 0);
                logger.info("Préstamo seleccionado con ID: " + idPrestamo);

                actualizarEstadoPrestamoARevision(idPrestamo); // Usamos el mismo método
                logger.info("Estado del préstamo actualizado a 'En revisión'.");

                mostrarPrestamosActivos();
                logger.info("Lista de préstamos activos actualizada.");
            } catch (Exception e) {
                logger.error( "Error al actualizar el estado del préstamo o al mostrar los activos", e);
            }
        } else {
            logger.warn("No se seleccionó ningún préstamo en la tabla.");
            JOptionPane.showMessageDialog(PrestamosActivos.this, "Por favor, selecciona un préstamo de la tabla.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaActivos;
    // End of variables declaration//GEN-END:variables
        public void mostrarPrestamosActivos() {
        logger.info("Iniciando la carga de préstamos activos...");
        actualizarPrestamosRetrasados();
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Préstamo");
        modelo.addColumn("Nombre de Usuario");
        modelo.addColumn("Apellido de Usuario");
        modelo.addColumn("Nombre de Equipo");
        modelo.addColumn("Fecha de Préstamo");
        modelo.addColumn("Fecha Devolución Esperada");
        modelo.addColumn("Estado");

        tablaActivos.setModel(modelo);

        String consultaSQL = "SELECT p.id_prestamo, u.nombre AS nombre_usuario, u.apellido AS apellido_usuario, "
                + "e.nombre AS nombre_equipo, p.fecha_prestamo, p.fecha_devolucion_esperada, "
                + "ep.nombre_estado AS estado_prestamo "
                + "FROM prestamos p "
                + "JOIN usuarios u ON p.id_usuario = u.id_usuario "
                + "JOIN equipos e ON p.id_equipo = e.id_equipo "
                + "JOIN estado_prestamo ep ON p.id_estado = ep.id_estado "
                + "WHERE ep.nombre_estado = 'activo' "
                + "ORDER BY p.id_prestamo ASC";

        String data[] = new String[7];

        try (Statement st = cn.createStatement(); ResultSet rs = st.executeQuery(consultaSQL)) {
            while (rs.next()) {
                data[0] = rs.getString("id_prestamo");
                data[1] = rs.getString("nombre_usuario");
                data[2] = rs.getString("apellido_usuario");
                data[3] = rs.getString("nombre_equipo");
                data[4] = rs.getString("fecha_prestamo");
                data[5] = rs.getString("fecha_devolucion_esperada");
                data[6] = rs.getString("estado_prestamo");
                modelo.addRow(data);
            }
            logger.info("Préstamos activos cargados correctamente.");
        } catch (SQLException e) {
            logger.error( "Error al mostrar los préstamos activos.", e);
        }
    }

    private void actualizarEstadoPrestamoARevision(String idPrestamo) {
        logger.info("Intentando actualizar el préstamo con ID " + idPrestamo + " a estado 'revisión'.");
        String consultaSQL = "UPDATE prestamos SET id_estado = 4 WHERE id_prestamo = ?";
        try (PreparedStatement pstmt = cn.prepareStatement(consultaSQL)) {
            pstmt.setString(1, idPrestamo);
            int filasAfectadas = pstmt.executeUpdate();
            if (filasAfectadas > 0) {
                JOptionPane.showMessageDialog(this, "El préstamo con ID " + idPrestamo + " ha sido marcado para revisión.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                logger.info("El préstamo con ID " + idPrestamo + " fue actualizado correctamente.");
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo marcar el préstamo para revisión.", "Error", JOptionPane.ERROR_MESSAGE);
                logger.warn("No se encontró ningún préstamo con ID " + idPrestamo + " para actualizar.");
            }
        } catch (SQLException e) {
            logger.error( "Error al actualizar el estado del préstamo con ID " + idPrestamo, e);
            JOptionPane.showMessageDialog(this, "Error al actualizar el estado del préstamo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void actualizarPrestamosRetrasados() {
        logger.info("Actualizando préstamos retrasados...");
        String sql = "UPDATE prestamos SET id_estado = 3 WHERE fecha_devolucion_esperada < CURDATE() AND id_estado = 1";
        try (PreparedStatement pstmt = cn.prepareStatement(sql)) {
            int filas = pstmt.executeUpdate();
            if (filas > 0) {
                logger.info("Se actualizaron " + filas + " préstamos a estado 'retrasado'.");
            } else {
                logger.info("No se encontraron préstamos activos con retraso.");
            }
        } catch (SQLException e) {
            logger.error( "Error al actualizar préstamos retrasados.", e);
        }
    }

}
