/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.proyecto_5sem;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.Month;
import java.time.format.TextStyle;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Marvin Siles
 */
public class ReporteValo extends javax.swing.JPanel {

    /**
     * Creates new form ReporteValo
     */
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(ReporteValo.class);
    conexionMysql conecta = new conexionMysql();
    Connection cn = conecta.estableceConexion();

    public ReporteValo() {
        initComponents();
        logger.info("Componentes inicializados en ReporteValo.");

        mostrarReporteDeValoraciones();
        logger.info("Se cargó el reporte de valoraciones.");

        cargarMesesComboBox();
        logger.info("Se cargaron los meses en el ComboBox.");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaReporteValo = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        Graficoo = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        mesComboBox = new javax.swing.JComboBox<>();
        PDF = new javax.swing.JButton();

        setBackground(new java.awt.Color(75, 99, 130));

        tablaReporteValo.setBackground(new java.awt.Color(164, 181, 196));
        tablaReporteValo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaReporteValo);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("<html>REPORTES<br>VALORACIONES </html>\n");

        jButton1.setBackground(new java.awt.Color(166, 136, 104));
        jButton1.setText("Generar Grafico");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Graficoo.setBackground(new java.awt.Color(102, 102, 102));
        Graficoo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Grafico", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        Graficoo.setForeground(new java.awt.Color(255, 255, 255));
        Graficoo.setMaximumSize(new java.awt.Dimension(602, 222));

        javax.swing.GroupLayout GraficooLayout = new javax.swing.GroupLayout(Graficoo);
        Graficoo.setLayout(GraficooLayout);
        GraficooLayout.setHorizontalGroup(
            GraficooLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        GraficooLayout.setVerticalGroup(
            GraficooLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 194, Short.MAX_VALUE)
        );

        jButton2.setBackground(new java.awt.Color(166, 136, 104));
        jButton2.setText("Filtrar por Mes");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        mesComboBox.setBackground(new java.awt.Color(164, 181, 196));

        PDF.setBackground(new java.awt.Color(166, 136, 104));
        PDF.setText("Exportar a PDF");
        PDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PDFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 679, Short.MAX_VALUE)
                    .addComponent(Graficoo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(99, 99, 99)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(mesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PDF, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(mesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Graficoo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(PDF)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        String mesSeleccionado = (String) mesComboBox.getSelectedItem();
        logger.info("Mes seleccionado: " + mesSeleccionado);

        if (mesSeleccionado.equals("Todos los meses")) {
            logger.info("Mostrando gráfico y reporte sin filtro por mes.");
            grafico(0);  // 0 indica sin filtro
            mostrarReporteDeValoraciones(); // Muestra todas las valoraciones
        } else {
            Month month = null;
            for (Month m : Month.values()) {
                if (m.getDisplayName(TextStyle.FULL, new Locale("es", "BO")).equalsIgnoreCase(mesSeleccionado)) {
                    month = m;
                    break;
                }
            }

            if (month != null) {
                int numeroMes = month.getValue();
                logger.info("Mes válido encontrado: " + mesSeleccionado + " (Número: " + numeroMes + ")");
                grafico(numeroMes); // Genera gráfico filtrado por mes
                mostrarValoracionesPorMes(mesSeleccionado); // Muestra los datos en la tabla filtrados por mes
            } else {
                logger.warn("Mes seleccionado no válido: " + mesSeleccionado);
                JOptionPane.showMessageDialog(this, "Mes seleccionado no válido.");
            }
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            logger.info("Inicio de ejecución del método grafico()");
            grafico();
            logger.info("Finalizó correctamente el método grafico()");
        } catch (Exception e) {
            logger.error( "Error en método grafico(): " + e.getMessage(), e);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void PDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PDFActionPerformed
        String mesSeleccionado = (String) mesComboBox.getSelectedItem();
        float margen = 72f;

        logger.info("Inicio generación de PDF para mes seleccionado: " + mesSeleccionado);

        Document document = new Document(PageSize.A4.rotate(), margen, margen, margen, margen);
        try {
            String directorio = "C:\\Users\\Marvin Siles\\Documents\\REPORTES PROYECTO\\";
            String nombreBase = "reporte_Valoraciones";
            String extension = ".pdf";
            int contador = 1;
            File archivo;

            do {
                archivo = new File(directorio + nombreBase + "_" + contador + extension);
                contador++;
            } while (archivo.exists());

            String ruta = archivo.getAbsolutePath();
            logger.info("Archivo PDF a crear: " + ruta);

            PdfWriter.getInstance(document, new FileOutputStream(ruta));
            document.open();

            // Fuentes
            Font fontTitulo = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
            Font fontTexto = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
            Font fontEncabezado = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

            // Título con mes seleccionado
            Paragraph titulo = new Paragraph("Reporte de Valoraciones - " + mesSeleccionado, fontTitulo);
            titulo.setAlignment(Element.ALIGN_CENTER);
            document.add(titulo);
            document.add(Chunk.NEWLINE);

            // Introducción
            Paragraph introduccion = new Paragraph(
                    "Este reporte presenta un análisis detallado de las valoraciones realizadas a los equipos, "
                    + "incluyendo datos tabulares y un gráfico representativo del promedio de puntuación por equipo.",
                    fontTexto);
            introduccion.setAlignment(Element.ALIGN_JUSTIFIED);
            introduccion.setSpacingAfter(20);
            document.add(introduccion);

            // Tabla
            PdfPTable tablaPDF = new PdfPTable(tablaReporteValo.getColumnCount());
            tablaPDF.setWidthPercentage(100);
            tablaPDF.setSpacingBefore(10f);
            tablaPDF.setSpacingAfter(10f);

            // Encabezados con fuente negrita
            for (int i = 0; i < tablaReporteValo.getColumnCount(); i++) {
                PdfPCell celda = new PdfPCell(new Phrase(tablaReporteValo.getColumnName(i), fontEncabezado));
                celda.setBackgroundColor(BaseColor.LIGHT_GRAY);
                celda.setHorizontalAlignment(Element.ALIGN_CENTER);
                tablaPDF.addCell(celda);
            }
            logger.info("Encabezados de tabla agregados al PDF.");

            // Datos tabla con fuente normal
            for (int filas = 0; filas < tablaReporteValo.getRowCount(); filas++) {
                for (int cols = 0; cols < tablaReporteValo.getColumnCount(); cols++) {
                    Object valor = tablaReporteValo.getValueAt(filas, cols);
                    PdfPCell celda = new PdfPCell(new Phrase(valor == null ? "" : valor.toString(), fontTexto));
                    celda.setHorizontalAlignment(Element.ALIGN_CENTER);
                    tablaPDF.addCell(celda);
                }
            }
            logger.info("Datos de tabla agregados al PDF.");

            document.add(tablaPDF);

            // Imagen del gráfico
            BufferedImage imagenGrafico = new BufferedImage(Graficoo.getWidth(), Graficoo.getHeight(), BufferedImage.TYPE_INT_RGB);
            Graficoo.paint(imagenGrafico.getGraphics());

            com.itextpdf.text.Image imagenPDF = com.itextpdf.text.Image.getInstance(imagenGrafico, null);
            imagenPDF.setAlignment(Element.ALIGN_CENTER);

            document.add(imagenPDF);
            logger.info("Gráfico agregado al PDF.");

            JOptionPane.showMessageDialog(this, "PDF generado con éxito en:\n" + ruta);
            logger.info("PDF generado exitosamente en: " + ruta);

        } catch (DocumentException | IOException e) {
            logger.error( "Error al generar PDF: " + e.getMessage(), e);
            JOptionPane.showMessageDialog(this, "Error al generar PDF: " + e.getMessage());
        } finally {
            document.close();
            logger.info("Documento PDF cerrado.");
        }
    }//GEN-LAST:event_PDFActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Graficoo;
    private javax.swing.JButton PDF;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> mesComboBox;
    private javax.swing.JTable tablaReporteValo;
    // End of variables declaration//GEN-END:variables
private void mostrarReporteDeValoraciones() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Valoración");
        modelo.addColumn("Usuario");
        modelo.addColumn("Equipo");
        modelo.addColumn("Comentario");
        modelo.addColumn("Puntuación");
        modelo.addColumn("Fecha Valoración");

        String sql = "SELECT v.id_valoracion, u.nombre AS usuario, e.nombre AS equipo, "
                + "v.comentario, v.puntuacion, v.fecha_valoracion "
                + "FROM valoraciones v "
                + "LEFT JOIN usuarios u ON v.id_usuario = u.id_usuario "
                + "LEFT JOIN equipos e ON v.id_equipo = e.id_equipo";

        logger.info("Ejecutando consulta para mostrar reporte de valoraciones");

        try (PreparedStatement ps = cn.prepareStatement(sql); ResultSet rs = ps.executeQuery()) {

            int count = 0;
            while (rs.next()) {
                Object[] fila = new Object[6];
                fila[0] = rs.getInt("id_valoracion");
                fila[1] = rs.getString("usuario");
                fila[2] = rs.getString("equipo");
                fila[3] = rs.getString("comentario");
                fila[4] = rs.getInt("puntuacion");
                fila[5] = rs.getTimestamp("fecha_valoracion");
                modelo.addRow(fila);
                count++;
            }

            tablaReporteValo.setModel(modelo);
            logger.info("Reporte cargado con éxito. Total valoraciones: {0}", count);

        } catch (SQLException e) {
            logger.error( "Error al cargar el reporte de valoraciones", e);
            JOptionPane.showMessageDialog(this, "Error al cargar el reporte de valoraciones: " + e.getMessage());
        }
    }

    private void mostrarValoracionesPorMes(String mesSeleccionado) {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Valoración");
        modelo.addColumn("Usuario");
        modelo.addColumn("Equipo");
        modelo.addColumn("Comentario");
        modelo.addColumn("Puntuación");
        modelo.addColumn("Fecha Valoración");

        logger.info("Mostrando valoraciones para el mes: {0}", mesSeleccionado);

        Month month = null;
        for (Month m : Month.values()) {
            if (m.getDisplayName(TextStyle.FULL, new Locale("es", "BO")).equalsIgnoreCase(mesSeleccionado)) {
                month = m;
                break;
            }
        }

        if (month != null) {
            int numeroMes = month.getValue();
            String sql = "SELECT v.id_valoracion, u.nombre AS usuario, e.nombre AS equipo, "
                    + "v.comentario, v.puntuacion, v.fecha_valoracion "
                    + "FROM valoraciones v "
                    + "LEFT JOIN usuarios u ON v.id_usuario = u.id_usuario "
                    + "LEFT JOIN equipos e ON v.id_equipo = e.id_equipo "
                    + "WHERE MONTH(v.fecha_valoracion) = ?";

            try (PreparedStatement ps = cn.prepareStatement(sql)) {
                ps.setInt(1, numeroMes);
                ResultSet rs = ps.executeQuery();

                int count = 0;
                while (rs.next()) {
                    Object[] fila = new Object[6];
                    fila[0] = rs.getInt("id_valoracion");
                    fila[1] = rs.getString("usuario");
                    fila[2] = rs.getString("equipo");
                    fila[3] = rs.getString("comentario");
                    fila[4] = rs.getInt("puntuacion");
                    fila[5] = rs.getTimestamp("fecha_valoracion");
                    modelo.addRow(fila);
                    count++;
                }

                tablaReporteValo.setModel(modelo);
                logger.info( "Valoraciones para mes {0} cargadas correctamente. Total: {1}", new Object[]{mesSeleccionado, count});

            } catch (SQLException e) {
                logger.error( "Error al cargar las valoraciones del mes " + mesSeleccionado, e);
                JOptionPane.showMessageDialog(this, "Error al cargar las valoraciones del mes: " + e.getMessage());
            }
        } else if (mesSeleccionado.equals("Todos los meses")) {
            logger.info("Seleccionado 'Todos los meses', mostrando todas las valoraciones");
            mostrarReporteDeValoraciones();
        } else {
            logger.warn("Mes seleccionado no válido: " + mesSeleccionado);
            JOptionPane.showMessageDialog(this, "Mes seleccionado no válido.");
        }
    }

    private void cargarMesesComboBox() {
        logger.info("Cargando meses en el ComboBox");
        mesComboBox.addItem("Todos los meses");
        for (Month month : Month.values()) {
            mesComboBox.addItem(month.getDisplayName(TextStyle.FULL, new Locale("es", "BO")));
        }
    }

    private Image getChartImage(JFreeChart chart, int width, int height) throws Exception {
        logger.info("Generando imagen del gráfico con tamaño " + width + "x" + height);
        BufferedImage bufferedImage = chart.createBufferedImage(width, height);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ImageIO.write(bufferedImage, "png", baos);
        baos.flush();
        byte[] imageInByte = baos.toByteArray();
        baos.close();
        return Image.getInstance(imageInByte);
    }

    public void grafico() {
        logger.info("Generando gráfico general de promedio de valoraciones por equipo");
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        String sql = "SELECT e.nombre AS equipo, AVG(v.puntuacion) AS promedio "
                + "FROM valoraciones v "
                + "JOIN equipos e ON v.id_equipo = e.id_equipo "
                + "GROUP BY e.nombre "
                + "ORDER BY promedio DESC";

        try (PreparedStatement ps = cn.prepareStatement(sql)) {
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String nombreEquipo = rs.getString("equipo");
                double promedio = rs.getDouble("promedio");
                dataset.addValue(promedio, "Promedio de Valoración", nombreEquipo);
            }

            JFreeChart barChart = ChartFactory.createBarChart(
                    "Promedio de Valoración por Equipo",
                    "Equipo",
                    "Promedio",
                    dataset,
                    PlotOrientation.VERTICAL,
                    true, true, false);

            // Estilo oscuro
            barChart.setBackgroundPaint(new Color(102, 102, 102));
            barChart.getPlot().setBackgroundPaint(new Color(102, 102, 102));
            barChart.getCategoryPlot().setRangeGridlinePaint(Color.WHITE);
            barChart.getTitle().setPaint(Color.WHITE);

            if (barChart.getLegend() != null) {
                barChart.getLegend().setItemPaint(Color.BLACK);
            }

            CategoryPlot plot = barChart.getCategoryPlot();
            CategoryAxis domainAxis = plot.getDomainAxis();
            domainAxis.setTickLabelPaint(Color.WHITE);
            domainAxis.setLabelPaint(Color.WHITE);

            NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
            rangeAxis.setTickLabelPaint(Color.WHITE);
            rangeAxis.setLabelPaint(Color.WHITE);
            rangeAxis.setRange(1.0, 5.0);

            ChartPanel chartPanel = new ChartPanel(barChart);
            chartPanel.setPreferredSize(new Dimension(Graficoo.getWidth(), Graficoo.getHeight()));

            Graficoo.removeAll();
            Graficoo.setLayout(new BorderLayout());
            Graficoo.add(chartPanel, BorderLayout.CENTER);
            Graficoo.validate();

            logger.info("Gráfico general generado y mostrado correctamente");

        } catch (SQLException e) {
            logger.error( "Error al generar gráfico general", e);
            JOptionPane.showMessageDialog(this, "Error al generar gráfico: " + e.getMessage());
        }
    }

    public void grafico(int numeroMes) {
        logger.info("Generando gráfico de promedio de valoraciones para el mes: {0}", numeroMes == 0 ? "Todos los meses" : numeroMes);
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        String sql = "SELECT e.nombre AS equipo, AVG(v.puntuacion) AS promedio "
                + "FROM valoraciones v "
                + "JOIN equipos e ON v.id_equipo = e.id_equipo ";

        if (numeroMes != 0) {
            sql += "WHERE MONTH(v.fecha_valoracion) = ? ";
        }

        sql += "GROUP BY e.nombre "
                + "ORDER BY promedio DESC";

        try (PreparedStatement ps = cn.prepareStatement(sql)) {

            if (numeroMes != 0) {
                ps.setInt(1, numeroMes);
            }

            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String nombreEquipo = rs.getString("equipo");
                double promedio = rs.getDouble("promedio");
                dataset.addValue(promedio, "Promedio de Valoración", nombreEquipo);
            }

            JFreeChart barChart = ChartFactory.createBarChart(
                    "Promedio de Valoración por Equipo",
                    "Equipo",
                    "Promedio",
                    dataset,
                    PlotOrientation.VERTICAL,
                    true, true, false);

            // Estilo oscuro
            barChart.setBackgroundPaint(new Color(102, 102, 102));
            barChart.getPlot().setBackgroundPaint(new Color(102, 102, 102));
            barChart.getCategoryPlot().setRangeGridlinePaint(Color.WHITE);
            barChart.getTitle().setPaint(Color.WHITE);

            if (barChart.getLegend() != null) {
                barChart.getLegend().setItemPaint(Color.BLACK);
            }

            CategoryPlot plot = barChart.getCategoryPlot();
            CategoryAxis domainAxis = plot.getDomainAxis();
            domainAxis.setTickLabelPaint(Color.WHITE);
            domainAxis.setLabelPaint(Color.WHITE);

            NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
            rangeAxis.setTickLabelPaint(Color.WHITE);
            rangeAxis.setLabelPaint(Color.WHITE);
            rangeAxis.setRange(1.0, 5.0);

            ChartPanel chartPanel = new ChartPanel(barChart);
            chartPanel.setPreferredSize(new Dimension(Graficoo.getWidth(), Graficoo.getHeight()));

            Graficoo.removeAll();
            Graficoo.setLayout(new BorderLayout());
            Graficoo.add(chartPanel, BorderLayout.CENTER);
            Graficoo.validate();

            logger.info("Gráfico generado para el mes correctamente");

        } catch (SQLException e) {
            logger.error( "Error al generar gráfico para el mes " + numeroMes, e);
            JOptionPane.showMessageDialog(this, "Error al generar gráfico: " + e.getMessage());
        }
    }

    private int obtenerNumeroMes(String mesEnEspanol) {
        logger.info("Obteniendo número de mes para: " + mesEnEspanol);
        for (Month m : Month.values()) {
            if (m.getDisplayName(TextStyle.FULL, new Locale("es", "BO")).equalsIgnoreCase(mesEnEspanol)) {
                logger.info( "Mes encontrado: {0} -> {1}", new Object[]{mesEnEspanol, m.getValue()});
                return m.getValue(); // Enero = 1, Febrero = 2, ..., Diciembre = 12
            }
        }
        logger.warn("Mes no válido: " + mesEnEspanol);
        return 0; // Si no se encuentra un mes válido
    }

}
